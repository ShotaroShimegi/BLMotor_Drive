
BLMotor_Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000456c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08004708  08004708  00014708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004940  08004940  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004948  08004948  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  200001dc  08004b2c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004b2c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008985  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001687  00000000  00000000  00028b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002a218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  0002ab70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000154fb  00000000  00000000  0002b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076c2  00000000  00000000  000408eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000899e7  00000000  00000000  00047fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1994  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e10  00000000  00000000  000d1a10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001dc 	.word	0x200001dc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080046ec 	.word	0x080046ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e0 	.word	0x200001e0
 80001d4:	080046ec 	.word	0x080046ec

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_uldivmod>:
 8000b10:	b953      	cbnz	r3, 8000b28 <__aeabi_uldivmod+0x18>
 8000b12:	b94a      	cbnz	r2, 8000b28 <__aeabi_uldivmod+0x18>
 8000b14:	2900      	cmp	r1, #0
 8000b16:	bf08      	it	eq
 8000b18:	2800      	cmpeq	r0, #0
 8000b1a:	bf1c      	itt	ne
 8000b1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b20:	f04f 30ff 	movne.w	r0, #4294967295
 8000b24:	f000 b972 	b.w	8000e0c <__aeabi_idiv0>
 8000b28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b30:	f000 f806 	bl	8000b40 <__udivmoddi4>
 8000b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr

08000b40 <__udivmoddi4>:
 8000b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	9e08      	ldr	r6, [sp, #32]
 8000b46:	4604      	mov	r4, r0
 8000b48:	4688      	mov	r8, r1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d14b      	bne.n	8000be6 <__udivmoddi4+0xa6>
 8000b4e:	428a      	cmp	r2, r1
 8000b50:	4615      	mov	r5, r2
 8000b52:	d967      	bls.n	8000c24 <__udivmoddi4+0xe4>
 8000b54:	fab2 f282 	clz	r2, r2
 8000b58:	b14a      	cbz	r2, 8000b6e <__udivmoddi4+0x2e>
 8000b5a:	f1c2 0720 	rsb	r7, r2, #32
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	fa20 f707 	lsr.w	r7, r0, r7
 8000b66:	4095      	lsls	r5, r2
 8000b68:	ea47 0803 	orr.w	r8, r7, r3
 8000b6c:	4094      	lsls	r4, r2
 8000b6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b72:	0c23      	lsrs	r3, r4, #16
 8000b74:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b78:	fa1f fc85 	uxth.w	ip, r5
 8000b7c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b84:	fb07 f10c 	mul.w	r1, r7, ip
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x60>
 8000b8c:	18eb      	adds	r3, r5, r3
 8000b8e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b92:	f080 811b 	bcs.w	8000dcc <__udivmoddi4+0x28c>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 8118 	bls.w	8000dcc <__udivmoddi4+0x28c>
 8000b9c:	3f02      	subs	r7, #2
 8000b9e:	442b      	add	r3, r5
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb4:	45a4      	cmp	ip, r4
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x8c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x290>
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x290>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	442c      	add	r4, r5
 8000bcc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd0:	eba4 040c 	sub.w	r4, r4, ip
 8000bd4:	2700      	movs	r7, #0
 8000bd6:	b11e      	cbz	r6, 8000be0 <__udivmoddi4+0xa0>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c6 4300 	strd	r4, r3, [r6]
 8000be0:	4639      	mov	r1, r7
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xbe>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	f000 80eb 	beq.w	8000dc6 <__udivmoddi4+0x286>
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f783 	clz	r7, r3
 8000c02:	2f00      	cmp	r7, #0
 8000c04:	d147      	bne.n	8000c96 <__udivmoddi4+0x156>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd0>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80fa 	bhi.w	8000e04 <__udivmoddi4+0x2c4>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	4698      	mov	r8, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa0>
 8000c1e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xe8>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 808f 	bne.w	8000d50 <__udivmoddi4+0x210>
 8000c32:	1b49      	subs	r1, r1, r5
 8000c34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c38:	fa1f f885 	uxth.w	r8, r5
 8000c3c:	2701      	movs	r7, #1
 8000c3e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x124>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x122>
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	f200 80cd 	bhi.w	8000dfc <__udivmoddi4+0x2bc>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x14c>
 8000c7c:	192c      	adds	r4, r5, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x14a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80b6 	bhi.w	8000df6 <__udivmoddi4+0x2b6>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e79f      	b.n	8000bd6 <__udivmoddi4+0x96>
 8000c96:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9a:	40bb      	lsls	r3, r7
 8000c9c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca4:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cac:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb4:	4325      	orrs	r5, r4
 8000cb6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cba:	0c2c      	lsrs	r4, r5, #16
 8000cbc:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc0:	fa1f fa8e 	uxth.w	sl, lr
 8000cc4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc8:	fb09 f40a 	mul.w	r4, r9, sl
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd6:	d90b      	bls.n	8000cf0 <__udivmoddi4+0x1b0>
 8000cd8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce0:	f080 8087 	bcs.w	8000df2 <__udivmoddi4+0x2b2>
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	f240 8084 	bls.w	8000df2 <__udivmoddi4+0x2b2>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4473      	add	r3, lr
 8000cf0:	1b1b      	subs	r3, r3, r4
 8000cf2:	b2ad      	uxth	r5, r5
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d00:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d04:	45a2      	cmp	sl, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x1da>
 8000d08:	eb1e 0404 	adds.w	r4, lr, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d10:	d26b      	bcs.n	8000dea <__udivmoddi4+0x2aa>
 8000d12:	45a2      	cmp	sl, r4
 8000d14:	d969      	bls.n	8000dea <__udivmoddi4+0x2aa>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4474      	add	r4, lr
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	eba4 040a 	sub.w	r4, r4, sl
 8000d26:	454c      	cmp	r4, r9
 8000d28:	46c2      	mov	sl, r8
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	d354      	bcc.n	8000dd8 <__udivmoddi4+0x298>
 8000d2e:	d051      	beq.n	8000dd4 <__udivmoddi4+0x294>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d069      	beq.n	8000e08 <__udivmoddi4+0x2c8>
 8000d34:	ebb1 050a 	subs.w	r5, r1, sl
 8000d38:	eb64 0403 	sbc.w	r4, r4, r3
 8000d3c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d40:	40fd      	lsrs	r5, r7
 8000d42:	40fc      	lsrs	r4, r7
 8000d44:	ea4c 0505 	orr.w	r5, ip, r5
 8000d48:	e9c6 5400 	strd	r5, r4, [r6]
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f703 	lsr.w	r7, r0, r3
 8000d58:	4095      	lsls	r5, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d66:	4338      	orrs	r0, r7
 8000d68:	0c01      	lsrs	r1, r0, #16
 8000d6a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6e:	fa1f f885 	uxth.w	r8, r5
 8000d72:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7a:	fb07 f308 	mul.w	r3, r7, r8
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	fa04 f402 	lsl.w	r4, r4, r2
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x256>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d8c:	d22f      	bcs.n	8000dee <__udivmoddi4+0x2ae>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d92d      	bls.n	8000dee <__udivmoddi4+0x2ae>
 8000d92:	3f02      	subs	r7, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	b281      	uxth	r1, r0
 8000d9a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb00 f308 	mul.w	r3, r0, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x27e>
 8000dae:	1869      	adds	r1, r5, r1
 8000db0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db4:	d217      	bcs.n	8000de6 <__udivmoddi4+0x2a6>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d915      	bls.n	8000de6 <__udivmoddi4+0x2a6>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4429      	add	r1, r5
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc4:	e73b      	b.n	8000c3e <__udivmoddi4+0xfe>
 8000dc6:	4637      	mov	r7, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e709      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000dcc:	4607      	mov	r7, r0
 8000dce:	e6e7      	b.n	8000ba0 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x8c>
 8000dd4:	4541      	cmp	r1, r8
 8000dd6:	d2ab      	bcs.n	8000d30 <__udivmoddi4+0x1f0>
 8000dd8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ddc:	eb69 020e 	sbc.w	r2, r9, lr
 8000de0:	3801      	subs	r0, #1
 8000de2:	4613      	mov	r3, r2
 8000de4:	e7a4      	b.n	8000d30 <__udivmoddi4+0x1f0>
 8000de6:	4660      	mov	r0, ip
 8000de8:	e7e9      	b.n	8000dbe <__udivmoddi4+0x27e>
 8000dea:	4618      	mov	r0, r3
 8000dec:	e795      	b.n	8000d1a <__udivmoddi4+0x1da>
 8000dee:	4667      	mov	r7, ip
 8000df0:	e7d1      	b.n	8000d96 <__udivmoddi4+0x256>
 8000df2:	4681      	mov	r9, r0
 8000df4:	e77c      	b.n	8000cf0 <__udivmoddi4+0x1b0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	442c      	add	r4, r5
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0x14c>
 8000dfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e00:	442b      	add	r3, r5
 8000e02:	e72f      	b.n	8000c64 <__udivmoddi4+0x124>
 8000e04:	4638      	mov	r0, r7
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xda>
 8000e08:	4637      	mov	r7, r6
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0xa0>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f92f 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f808 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f001 fd1c 	bl	8002880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f939 	bl	80010ea <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f000 f90f 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004
 8000eb0:	20000000 	.word	0x20000000

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000004 	.word	0x20000004
 8000ed8:	20000204 	.word	0x20000204

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000204 	.word	0x20000204

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_Delay+0x40>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000004 	.word	0x20000004

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff47 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff5c 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff8e 	bl	8000ff0 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffb0 	bl	8001058 <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e159      	b.n	80013d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 8148 	bne.w	80013ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x4a>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b12      	cmp	r3, #18
 800114c:	d123      	bne.n	8001196 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	08da      	lsrs	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3208      	adds	r2, #8
 8001156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	69b9      	ldr	r1, [r7, #24]
 8001192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0203 	and.w	r2, r3, #3
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d00b      	beq.n	80011ea <HAL_GPIO_Init+0xe6>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011de:	2b11      	cmp	r3, #17
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d130      	bne.n	800124c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	f003 0201 	and.w	r2, r3, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80a2 	beq.w	80013ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <HAL_GPIO_Init+0x2e4>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a55      	ldr	r2, [pc, #340]	; (80013e8 <HAL_GPIO_Init+0x2e4>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <HAL_GPIO_Init+0x2e4>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a6:	4a51      	ldr	r2, [pc, #324]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d019      	beq.n	8001306 <HAL_GPIO_Init+0x202>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a47      	ldr	r2, [pc, #284]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0x1fe>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a46      	ldr	r2, [pc, #280]	; (80013f8 <HAL_GPIO_Init+0x2f4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00d      	beq.n	80012fe <HAL_GPIO_Init+0x1fa>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a45      	ldr	r2, [pc, #276]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x1f6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a44      	ldr	r2, [pc, #272]	; (8001400 <HAL_GPIO_Init+0x2fc>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_GPIO_Init+0x1f2>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e008      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012f6:	2307      	movs	r3, #7
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x204>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x204>
 8001306:	2300      	movs	r3, #0
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	f002 0203 	and.w	r2, r2, #3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001318:	4934      	ldr	r1, [pc, #208]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <HAL_GPIO_Init+0x300>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134a:	4a2e      	ldr	r2, [pc, #184]	; (8001404 <HAL_GPIO_Init+0x300>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <HAL_GPIO_Init+0x300>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001374:	4a23      	ldr	r2, [pc, #140]	; (8001404 <HAL_GPIO_Init+0x300>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_GPIO_Init+0x300>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139e:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_GPIO_Init+0x300>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_GPIO_Init+0x300>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_GPIO_Init+0x300>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3301      	adds	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	f67f aea2 	bls.w	8001120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013dc:	bf00      	nop
 80013de:	3724      	adds	r7, #36	; 0x24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40013800 	.word	0x40013800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40021000 	.word	0x40021000
 8001404:	40013c00 	.word	0x40013c00

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001424:	e003      	b.n	800142e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	041a      	lsls	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e22d      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d075      	beq.n	8001546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145a:	4ba3      	ldr	r3, [pc, #652]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b04      	cmp	r3, #4
 8001464:	d00c      	beq.n	8001480 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001466:	4ba0      	ldr	r3, [pc, #640]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146e:	2b08      	cmp	r3, #8
 8001470:	d112      	bne.n	8001498 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001472:	4b9d      	ldr	r3, [pc, #628]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800147e:	d10b      	bne.n	8001498 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	4b99      	ldr	r3, [pc, #612]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d05b      	beq.n	8001544 <HAL_RCC_OscConfig+0x108>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d157      	bne.n	8001544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e208      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a0:	d106      	bne.n	80014b0 <HAL_RCC_OscConfig+0x74>
 80014a2:	4b91      	ldr	r3, [pc, #580]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a90      	ldr	r2, [pc, #576]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e01d      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x98>
 80014ba:	4b8b      	ldr	r3, [pc, #556]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a8a      	ldr	r2, [pc, #552]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b88      	ldr	r3, [pc, #544]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a87      	ldr	r2, [pc, #540]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014d4:	4b84      	ldr	r3, [pc, #528]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a83      	ldr	r2, [pc, #524]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a80      	ldr	r2, [pc, #512]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fcf2 	bl	8000edc <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fcee 	bl	8000edc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1cd      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4b76      	ldr	r3, [pc, #472]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0xc0>
 800151a:	e014      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fcde 	bl	8000edc <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fcda 	bl	8000edc <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1b9      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	4b6c      	ldr	r3, [pc, #432]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0xe8>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d063      	beq.n	800161a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001552:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155e:	4b62      	ldr	r3, [pc, #392]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001566:	2b08      	cmp	r3, #8
 8001568:	d11c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d116      	bne.n	80015a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001576:	4b5c      	ldr	r3, [pc, #368]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x152>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e18d      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	4b56      	ldr	r3, [pc, #344]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4952      	ldr	r1, [pc, #328]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	e03a      	b.n	800161a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ac:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <HAL_RCC_OscConfig+0x2b0>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fc93 	bl	8000edc <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fc8f 	bl	8000edc <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e16e      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b43      	ldr	r3, [pc, #268]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4940      	ldr	r1, [pc, #256]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e015      	b.n	800161a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ee:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_RCC_OscConfig+0x2b0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc72 	bl	8000edc <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff fc6e 	bl	8000edc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e14d      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d030      	beq.n	8001688 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d016      	beq.n	800165c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <HAL_RCC_OscConfig+0x2b4>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001634:	f7ff fc52 	bl	8000edc <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff fc4e 	bl	8000edc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e12d      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x200>
 800165a:	e015      	b.n	8001688 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_RCC_OscConfig+0x2b4>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fc3b 	bl	8000edc <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fc37 	bl	8000edc <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e116      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80a0 	beq.w	80017d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016c2:	2301      	movs	r3, #1
 80016c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_OscConfig+0x2b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d121      	bne.n	8001716 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_RCC_OscConfig+0x2b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_RCC_OscConfig+0x2b8>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016de:	f7ff fbfd 	bl	8000edc <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	e011      	b.n	800170a <HAL_RCC_OscConfig+0x2ce>
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	42470000 	.word	0x42470000
 80016f0:	42470e80 	.word	0x42470e80
 80016f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f8:	f7ff fbf0 	bl	8000edc <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e0cf      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170a:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x478>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d106      	bne.n	800172c <HAL_RCC_OscConfig+0x2f0>
 800171e:	4b66      	ldr	r3, [pc, #408]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	4a65      	ldr	r2, [pc, #404]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6713      	str	r3, [r2, #112]	; 0x70
 800172a:	e01c      	b.n	8001766 <HAL_RCC_OscConfig+0x32a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b05      	cmp	r3, #5
 8001732:	d10c      	bne.n	800174e <HAL_RCC_OscConfig+0x312>
 8001734:	4b60      	ldr	r3, [pc, #384]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a5f      	ldr	r2, [pc, #380]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
 8001740:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4a5c      	ldr	r2, [pc, #368]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6713      	str	r3, [r2, #112]	; 0x70
 800174c:	e00b      	b.n	8001766 <HAL_RCC_OscConfig+0x32a>
 800174e:	4b5a      	ldr	r3, [pc, #360]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a59      	ldr	r2, [pc, #356]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
 800175a:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a56      	ldr	r2, [pc, #344]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d015      	beq.n	800179a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176e:	f7ff fbb5 	bl	8000edc <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff fbb1 	bl	8000edc <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	; 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e08e      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0ee      	beq.n	8001776 <HAL_RCC_OscConfig+0x33a>
 8001798:	e014      	b.n	80017c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff fb9f 	bl	8000edc <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff fb9b 	bl	8000edc <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e078      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1ee      	bne.n	80017a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d105      	bne.n	80017d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a3a      	ldr	r2, [pc, #232]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 80017d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d064      	beq.n	80018a8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d05c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d141      	bne.n	8001876 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_RCC_OscConfig+0x480>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb70 	bl	8000edc <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fb6c 	bl	8000edc <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e04b      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	019b      	lsls	r3, r3, #6
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	3b01      	subs	r3, #1
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	491d      	ldr	r1, [pc, #116]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <HAL_RCC_OscConfig+0x480>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fb45 	bl	8000edc <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff fb41 	bl	8000edc <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e020      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x41a>
 8001874:	e018      	b.n	80018a8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_RCC_OscConfig+0x480>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fb2e 	bl	8000edc <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fb2a 	bl	8000edc <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e009      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_RCC_OscConfig+0x47c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x448>
 80018a2:	e001      	b.n	80018a8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40007000 	.word	0x40007000
 80018b8:	40023800 	.word	0x40023800
 80018bc:	42470060 	.word	0x42470060

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0ca      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_RCC_ClockConfig+0x1b4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d90c      	bls.n	80018fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <HAL_RCC_ClockConfig+0x1b4>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b62      	ldr	r3, [pc, #392]	; (8001a74 <HAL_RCC_ClockConfig+0x1b4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b6      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b58      	ldr	r3, [pc, #352]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a57      	ldr	r2, [pc, #348]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 800191a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800191e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b52      	ldr	r3, [pc, #328]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 8001932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494c      	ldr	r1, [pc, #304]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d044      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d119      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07d      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d003      	beq.n	800197e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197a:	2b03      	cmp	r3, #3
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06d      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e065      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4933      	ldr	r1, [pc, #204]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b0:	f7ff fa94 	bl	8000edc <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff fa90 	bl	8000edc <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e04d      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_ClockConfig+0x1b4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d20c      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_RCC_ClockConfig+0x1b4>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_RCC_ClockConfig+0x1b4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e030      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4915      	ldr	r1, [pc, #84]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490d      	ldr	r1, [pc, #52]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 f81d 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 8001a4a:	4601      	mov	r1, r0
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a5e:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff f9f6 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08004708 	.word	0x08004708
 8001a80:	20000008 	.word	0x20000008

08001a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a9a:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x158>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d007      	beq.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x32>
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d008      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x38>
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 808d 	bne.w	8001bca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001ab2:	60bb      	str	r3, [r7, #8]
       break;
 8001ab4:	e08c      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ab6:	4b4b      	ldr	r3, [pc, #300]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ab8:	60bb      	str	r3, [r7, #8]
      break;
 8001aba:	e089      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001abc:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x158>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ac6:	4b45      	ldr	r3, [pc, #276]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x158>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d023      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad2:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x158>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	f04f 0400 	mov.w	r4, #0
 8001adc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	ea03 0501 	and.w	r5, r3, r1
 8001ae8:	ea04 0602 	and.w	r6, r4, r2
 8001aec:	4a3d      	ldr	r2, [pc, #244]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aee:	fb02 f106 	mul.w	r1, r2, r6
 8001af2:	2200      	movs	r2, #0
 8001af4:	fb02 f205 	mul.w	r2, r2, r5
 8001af8:	440a      	add	r2, r1
 8001afa:	493a      	ldr	r1, [pc, #232]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001afc:	fba5 0101 	umull	r0, r1, r5, r1
 8001b00:	1853      	adds	r3, r2, r1
 8001b02:	4619      	mov	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f04f 0400 	mov.w	r4, #0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4623      	mov	r3, r4
 8001b0e:	f7fe ffff 	bl	8000b10 <__aeabi_uldivmod>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e049      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1a:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x158>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	099b      	lsrs	r3, r3, #6
 8001b20:	f04f 0400 	mov.w	r4, #0
 8001b24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	ea03 0501 	and.w	r5, r3, r1
 8001b30:	ea04 0602 	and.w	r6, r4, r2
 8001b34:	4629      	mov	r1, r5
 8001b36:	4632      	mov	r2, r6
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	f04f 0400 	mov.w	r4, #0
 8001b40:	0154      	lsls	r4, r2, #5
 8001b42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b46:	014b      	lsls	r3, r1, #5
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	1b49      	subs	r1, r1, r5
 8001b4e:	eb62 0206 	sbc.w	r2, r2, r6
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	f04f 0400 	mov.w	r4, #0
 8001b5a:	0194      	lsls	r4, r2, #6
 8001b5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b60:	018b      	lsls	r3, r1, #6
 8001b62:	1a5b      	subs	r3, r3, r1
 8001b64:	eb64 0402 	sbc.w	r4, r4, r2
 8001b68:	f04f 0100 	mov.w	r1, #0
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	00e2      	lsls	r2, r4, #3
 8001b72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b76:	00d9      	lsls	r1, r3, #3
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4614      	mov	r4, r2
 8001b7c:	195b      	adds	r3, r3, r5
 8001b7e:	eb44 0406 	adc.w	r4, r4, r6
 8001b82:	f04f 0100 	mov.w	r1, #0
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	02a2      	lsls	r2, r4, #10
 8001b8c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b90:	0299      	lsls	r1, r3, #10
 8001b92:	460b      	mov	r3, r1
 8001b94:	4614      	mov	r4, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	4621      	mov	r1, r4
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f04f 0400 	mov.w	r4, #0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	f7fe ffb4 	bl	8000b10 <__aeabi_uldivmod>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	460c      	mov	r4, r1
 8001bac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x158>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	0c1b      	lsrs	r3, r3, #16
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	60bb      	str	r3, [r7, #8]
      break;
 8001bc8:	e002      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001bcc:	60bb      	str	r3, [r7, #8]
      break;
 8001bce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	00f42400 	.word	0x00f42400
 8001be4:	017d7840 	.word	0x017d7840

08001be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e01d      	b.n	8001c36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 ff8e 	bl	8002b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f9ee 	bl	8002008 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e01d      	b.n	8001c8c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d106      	bne.n	8001c6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f815 	bl	8001c94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f000 f9c3 	bl	8002008 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	6839      	ldr	r1, [r7, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fc4a 	bl	8002554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_TIM_PWM_Start+0x60>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d107      	bne.n	8001cda <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b06      	cmp	r3, #6
 8001cea:	d007      	beq.n	8001cfc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40010000 	.word	0x40010000

08001d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e0b4      	b.n	8001e90 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2202      	movs	r2, #2
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	f200 809f 	bhi.w	8001e7c <HAL_TIM_PWM_ConfigChannel+0x170>
 8001d3e:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d79 	.word	0x08001d79
 8001d48:	08001e7d 	.word	0x08001e7d
 8001d4c:	08001e7d 	.word	0x08001e7d
 8001d50:	08001e7d 	.word	0x08001e7d
 8001d54:	08001db9 	.word	0x08001db9
 8001d58:	08001e7d 	.word	0x08001e7d
 8001d5c:	08001e7d 	.word	0x08001e7d
 8001d60:	08001e7d 	.word	0x08001e7d
 8001d64:	08001dfb 	.word	0x08001dfb
 8001d68:	08001e7d 	.word	0x08001e7d
 8001d6c:	08001e7d 	.word	0x08001e7d
 8001d70:	08001e7d 	.word	0x08001e7d
 8001d74:	08001e3b 	.word	0x08001e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f9c2 	bl	8002108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0208 	orr.w	r2, r2, #8
 8001d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0204 	bic.w	r2, r2, #4
 8001da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6999      	ldr	r1, [r3, #24]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	619a      	str	r2, [r3, #24]
      break;
 8001db6:	e062      	b.n	8001e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fa08 	bl	80021d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699a      	ldr	r2, [r3, #24]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6999      	ldr	r1, [r3, #24]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	021a      	lsls	r2, r3, #8
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	619a      	str	r2, [r3, #24]
      break;
 8001df8:	e041      	b.n	8001e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 fa53 	bl	80022ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0208 	orr.w	r2, r2, #8
 8001e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0204 	bic.w	r2, r2, #4
 8001e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	69d9      	ldr	r1, [r3, #28]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	61da      	str	r2, [r3, #28]
      break;
 8001e38:	e021      	b.n	8001e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fa9d 	bl	8002380 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	69da      	ldr	r2, [r3, #28]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69d9      	ldr	r1, [r3, #28]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	021a      	lsls	r2, r3, #8
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	61da      	str	r2, [r3, #28]
      break;
 8001e7a:	e000      	b.n	8001e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001e7c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_TIM_ConfigClockSource+0x18>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e0a6      	b.n	8001ffe <HAL_TIM_ConfigClockSource+0x166>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ed6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d067      	beq.n	8001fb8 <HAL_TIM_ConfigClockSource+0x120>
 8001ee8:	2b40      	cmp	r3, #64	; 0x40
 8001eea:	d80b      	bhi.n	8001f04 <HAL_TIM_ConfigClockSource+0x6c>
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d073      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0x140>
 8001ef0:	2b10      	cmp	r3, #16
 8001ef2:	d802      	bhi.n	8001efa <HAL_TIM_ConfigClockSource+0x62>
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d06f      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001ef8:	e078      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	d06c      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0x140>
 8001efe:	2b30      	cmp	r3, #48	; 0x30
 8001f00:	d06a      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f02:	e073      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f04:	2b70      	cmp	r3, #112	; 0x70
 8001f06:	d00d      	beq.n	8001f24 <HAL_TIM_ConfigClockSource+0x8c>
 8001f08:	2b70      	cmp	r3, #112	; 0x70
 8001f0a:	d804      	bhi.n	8001f16 <HAL_TIM_ConfigClockSource+0x7e>
 8001f0c:	2b50      	cmp	r3, #80	; 0x50
 8001f0e:	d033      	beq.n	8001f78 <HAL_TIM_ConfigClockSource+0xe0>
 8001f10:	2b60      	cmp	r3, #96	; 0x60
 8001f12:	d041      	beq.n	8001f98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f14:	e06a      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1a:	d066      	beq.n	8001fea <HAL_TIM_ConfigClockSource+0x152>
 8001f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f20:	d017      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f22:	e063      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6899      	ldr	r1, [r3, #8]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f000 faee 	bl	8002514 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	609a      	str	r2, [r3, #8]
      break;
 8001f50:	e04c      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6899      	ldr	r1, [r3, #8]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f000 fad7 	bl	8002514 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f74:	609a      	str	r2, [r3, #8]
      break;
 8001f76:	e039      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	461a      	mov	r2, r3
 8001f86:	f000 fa4b 	bl	8002420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2150      	movs	r1, #80	; 0x50
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 faa4 	bl	80024de <TIM_ITRx_SetConfig>
      break;
 8001f96:	e029      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f000 fa6a 	bl	800247e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2160      	movs	r1, #96	; 0x60
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fa94 	bl	80024de <TIM_ITRx_SetConfig>
      break;
 8001fb6:	e019      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f000 fa2b 	bl	8002420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2140      	movs	r1, #64	; 0x40
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fa84 	bl	80024de <TIM_ITRx_SetConfig>
      break;
 8001fd6:	e009      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f000 fa7b 	bl	80024de <TIM_ITRx_SetConfig>
      break;
 8001fe8:	e000      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a34      	ldr	r2, [pc, #208]	; (80020ec <TIM_Base_SetConfig+0xe4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00f      	beq.n	8002040 <TIM_Base_SetConfig+0x38>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002026:	d00b      	beq.n	8002040 <TIM_Base_SetConfig+0x38>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a31      	ldr	r2, [pc, #196]	; (80020f0 <TIM_Base_SetConfig+0xe8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <TIM_Base_SetConfig+0x38>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a30      	ldr	r2, [pc, #192]	; (80020f4 <TIM_Base_SetConfig+0xec>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0x38>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a2f      	ldr	r2, [pc, #188]	; (80020f8 <TIM_Base_SetConfig+0xf0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d108      	bne.n	8002052 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a25      	ldr	r2, [pc, #148]	; (80020ec <TIM_Base_SetConfig+0xe4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01b      	beq.n	8002092 <TIM_Base_SetConfig+0x8a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002060:	d017      	beq.n	8002092 <TIM_Base_SetConfig+0x8a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a22      	ldr	r2, [pc, #136]	; (80020f0 <TIM_Base_SetConfig+0xe8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <TIM_Base_SetConfig+0x8a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a21      	ldr	r2, [pc, #132]	; (80020f4 <TIM_Base_SetConfig+0xec>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00f      	beq.n	8002092 <TIM_Base_SetConfig+0x8a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a20      	ldr	r2, [pc, #128]	; (80020f8 <TIM_Base_SetConfig+0xf0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00b      	beq.n	8002092 <TIM_Base_SetConfig+0x8a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <TIM_Base_SetConfig+0xf4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <TIM_Base_SetConfig+0x8a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <TIM_Base_SetConfig+0xf8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d003      	beq.n	8002092 <TIM_Base_SetConfig+0x8a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <TIM_Base_SetConfig+0xfc>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d108      	bne.n	80020a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <TIM_Base_SetConfig+0xe4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d103      	bne.n	80020d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	615a      	str	r2, [r3, #20]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40000800 	.word	0x40000800
 80020f8:	40000c00 	.word	0x40000c00
 80020fc:	40014000 	.word	0x40014000
 8002100:	40014400 	.word	0x40014400
 8002104:	40014800 	.word	0x40014800

08002108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f023 0201 	bic.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f023 0302 	bic.w	r3, r3, #2
 8002150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <TIM_OC1_SetConfig+0xc8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d10c      	bne.n	800217e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f023 0308 	bic.w	r3, r3, #8
 800216a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <TIM_OC1_SetConfig+0xc8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d111      	bne.n	80021aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800218c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	621a      	str	r2, [r3, #32]
}
 80021c4:	bf00      	nop
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40010000 	.word	0x40010000

080021d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f023 0210 	bic.w	r2, r3, #16
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f023 0320 	bic.w	r3, r3, #32
 800221e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <TIM_OC2_SetConfig+0xd4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d10d      	bne.n	8002250 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800223a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800224e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <TIM_OC2_SetConfig+0xd4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d113      	bne.n	8002280 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800225e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	621a      	str	r2, [r3, #32]
}
 800229a:	bf00      	nop
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40010000 	.word	0x40010000

080022ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <TIM_OC3_SetConfig+0xd0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d10d      	bne.n	8002326 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <TIM_OC3_SetConfig+0xd0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d113      	bne.n	8002356 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800233c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	621a      	str	r2, [r3, #32]
}
 8002370:	bf00      	nop
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40010000 	.word	0x40010000

08002380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	031b      	lsls	r3, r3, #12
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <TIM_OC4_SetConfig+0x9c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d109      	bne.n	80023f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	621a      	str	r2, [r3, #32]
}
 800240e:	bf00      	nop
 8002410:	371c      	adds	r7, #28
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40010000 	.word	0x40010000

08002420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0201 	bic.w	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f023 030a 	bic.w	r3, r3, #10
 800245c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	621a      	str	r2, [r3, #32]
}
 8002472:	bf00      	nop
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247e:	b480      	push	{r7}
 8002480:	b087      	sub	sp, #28
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f023 0210 	bic.w	r2, r3, #16
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	031b      	lsls	r3, r3, #12
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	621a      	str	r2, [r3, #32]
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f043 0307 	orr.w	r3, r3, #7
 8002500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	609a      	str	r2, [r3, #8]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800252e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	021a      	lsls	r2, r3, #8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	431a      	orrs	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	609a      	str	r2, [r3, #8]
}
 8002548:	bf00      	nop
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2201      	movs	r2, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	43db      	mvns	r3, r3
 8002576:	401a      	ands	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1a      	ldr	r2, [r3, #32]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	431a      	orrs	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	621a      	str	r2, [r3, #32]
}
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e032      	b.n	800261c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ee:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002640:	2302      	movs	r3, #2
 8002642:	e03d      	b.n	80026c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4b10      	ldr	r3, [pc, #64]	; (8002728 <MX_GPIO_Init+0x5c>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <MX_GPIO_Init+0x5c>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6313      	str	r3, [r2, #48]	; 0x30
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <MX_GPIO_Init+0x5c>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2120      	movs	r1, #32
 8002700:	480a      	ldr	r0, [pc, #40]	; (800272c <MX_GPIO_Init+0x60>)
 8002702:	f7fe fe81 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002706:	2320      	movs	r3, #32
 8002708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270a:	2301      	movs	r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4804      	ldr	r0, [pc, #16]	; (800272c <MX_GPIO_Init+0x60>)
 800271c:	f7fe fcf2 	bl	8001104 <HAL_GPIO_Init>

}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	40020000 	.word	0x40020000

08002730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002734:	f7fe fb6c 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002738:	f000 f83c 	bl	80027b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800273c:	f7ff ffc6 	bl	80026cc <MX_GPIO_Init>
  MX_TIM1_Init();
 8002740:	f000 f956 	bl	80029f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <main+0x78>)
 8002746:	2260      	movs	r2, #96	; 0x60
 8002748:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50 - 1;
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <main+0x78>)
 800274c:	2231      	movs	r2, #49	; 0x31
 800274e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <main+0x78>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <main+0x78>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]

  if(HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC,TIM_CHANNEL_1) != HAL_OK)
 800275c:	2200      	movs	r2, #0
 800275e:	4912      	ldr	r1, [pc, #72]	; (80027a8 <main+0x78>)
 8002760:	4812      	ldr	r0, [pc, #72]	; (80027ac <main+0x7c>)
 8002762:	f7ff fad3 	bl	8001d0c <HAL_TIM_PWM_ConfigChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <main+0x40>
  {
	Error_Handler();
 800276c:	f000 f880 	bl	8002870 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1) != HAL_OK)
 8002770:	2100      	movs	r1, #0
 8002772:	480e      	ldr	r0, [pc, #56]	; (80027ac <main+0x7c>)
 8002774:	f7ff fa98 	bl	8001ca8 <HAL_TIM_PWM_Start>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <main+0x52>
  {
	  Error_Handler();
 800277e:	f000 f877 	bl	8002870 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,SET);
 8002782:	2201      	movs	r2, #1
 8002784:	2120      	movs	r1, #32
 8002786:	480a      	ldr	r0, [pc, #40]	; (80027b0 <main+0x80>)
 8002788:	f7fe fe3e 	bl	8001408 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800278c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002790:	f7fe fbb0 	bl	8000ef4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	2120      	movs	r1, #32
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <main+0x80>)
 800279a:	f7fe fe35 	bl	8001408 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800279e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027a2:	f7fe fba7 	bl	8000ef4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,SET);
 80027a6:	e7ec      	b.n	8002782 <main+0x52>
 80027a8:	20000208 	.word	0x20000208
 80027ac:	20000224 	.word	0x20000224
 80027b0:	40020000 	.word	0x40020000

080027b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b094      	sub	sp, #80	; 0x50
 80027b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ba:	f107 0320 	add.w	r3, r7, #32
 80027be:	2230      	movs	r2, #48	; 0x30
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fa64 	bl	8002c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <SystemClock_Config+0xb4>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	4a21      	ldr	r2, [pc, #132]	; (8002868 <SystemClock_Config+0xb4>)
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6413      	str	r3, [r2, #64]	; 0x40
 80027e8:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <SystemClock_Config+0xb4>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <SystemClock_Config+0xb8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <SystemClock_Config+0xb8>)
 80027fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <SystemClock_Config+0xb8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002810:	2302      	movs	r3, #2
 8002812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002814:	2301      	movs	r3, #1
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002818:	2310      	movs	r3, #16
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800281c:	2300      	movs	r3, #0
 800281e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002820:	f107 0320 	add.w	r3, r7, #32
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fe09 	bl	800143c <HAL_RCC_OscConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002830:	f000 f81e 	bl	8002870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002834:	230f      	movs	r3, #15
 8002836:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002838:	2300      	movs	r3, #0
 800283a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f836 	bl	80018c0 <HAL_RCC_ClockConfig>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800285a:	f000 f809 	bl	8002870 <Error_Handler>
  }
}
 800285e:	bf00      	nop
 8002860:	3750      	adds	r7, #80	; 0x50
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000

08002870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_MspInit+0x4c>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_MspInit+0x4c>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002894:	6453      	str	r3, [r2, #68]	; 0x44
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_MspInit+0x4c>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_MspInit+0x4c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <HAL_MspInit+0x4c>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_MspInit+0x4c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <HardFault_Handler+0x4>

080028e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <MemManage_Handler+0x4>

080028ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <BusFault_Handler+0x4>

080028f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <UsageFault_Handler+0x4>

080028f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002924:	f7fe fac6 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}

0800292c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <_sbrk+0x50>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <_sbrk+0x16>
		heap_end = &end;
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <_sbrk+0x50>)
 800293e:	4a10      	ldr	r2, [pc, #64]	; (8002980 <_sbrk+0x54>)
 8002940:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <_sbrk+0x50>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <_sbrk+0x50>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	466a      	mov	r2, sp
 8002952:	4293      	cmp	r3, r2
 8002954:	d907      	bls.n	8002966 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002956:	f000 f971 	bl	8002c3c <__errno>
 800295a:	4602      	mov	r2, r0
 800295c:	230c      	movs	r3, #12
 800295e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	e006      	b.n	8002974 <_sbrk+0x48>
	}

	heap_end += incr;
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <_sbrk+0x50>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	4a03      	ldr	r2, [pc, #12]	; (800297c <_sbrk+0x50>)
 8002970:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200001f8 	.word	0x200001f8
 8002980:	20000268 	.word	0x20000268

08002984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <SystemInit+0x60>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <SystemInit+0x60>)
 8002990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <SystemInit+0x64>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <SystemInit+0x64>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <SystemInit+0x64>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80029aa:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <SystemInit+0x64>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <SystemInit+0x64>)
 80029b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <SystemInit+0x64>)
 80029bc:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <SystemInit+0x68>)
 80029be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <SystemInit+0x64>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a08      	ldr	r2, [pc, #32]	; (80029e8 <SystemInit+0x64>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <SystemInit+0x64>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <SystemInit+0x60>)
 80029d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d8:	609a      	str	r2, [r3, #8]
#endif
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00
 80029e8:	40023800 	.word	0x40023800
 80029ec:	24003010 	.word	0x24003010

080029f0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b096      	sub	sp, #88	; 0x58
 80029f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
 8002a1c:	611a      	str	r2, [r3, #16]
 8002a1e:	615a      	str	r2, [r3, #20]
 8002a20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	2220      	movs	r2, #32
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f931 	bl	8002c90 <memset>

  htim1.Instance = TIM1;
 8002a2e:	4b3e      	ldr	r3, [pc, #248]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002a30:	4a3e      	ldr	r2, [pc, #248]	; (8002b2c <MX_TIM1_Init+0x13c>)
 8002a32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8002a34:	4b3c      	ldr	r3, [pc, #240]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002a36:	220f      	movs	r2, #15
 8002a38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002a40:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002a42:	2263      	movs	r2, #99	; 0x63
 8002a44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a46:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a4c:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a52:	4b35      	ldr	r3, [pc, #212]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a58:	4833      	ldr	r0, [pc, #204]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002a5a:	f7ff f8c5 	bl	8001be8 <HAL_TIM_Base_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002a64:	f7ff ff04 	bl	8002870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a72:	4619      	mov	r1, r3
 8002a74:	482c      	ldr	r0, [pc, #176]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002a76:	f7ff fa0f 	bl	8001e98 <HAL_TIM_ConfigClockSource>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002a80:	f7ff fef6 	bl	8002870 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a84:	4828      	ldr	r0, [pc, #160]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002a86:	f7ff f8da 	bl	8001c3e <HAL_TIM_PWM_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002a90:	f7ff feee 	bl	8002870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4821      	ldr	r0, [pc, #132]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002aa4:	f7ff fd7b 	bl	800259e <HAL_TIMEx_MasterConfigSynchronization>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002aae:	f7ff fedf 	bl	8002870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ab2:	2360      	movs	r3, #96	; 0x60
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aba:	2300      	movs	r3, #0
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4814      	ldr	r0, [pc, #80]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002ad8:	f7ff f918 	bl	8001d0c <HAL_TIM_PWM_ConfigChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002ae2:	f7ff fec5 	bl	8002870 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002afe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4807      	ldr	r0, [pc, #28]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002b0a:	f7ff fd8d 	bl	8002628 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002b14:	f7ff feac 	bl	8002870 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002b18:	4803      	ldr	r0, [pc, #12]	; (8002b28 <MX_TIM1_Init+0x138>)
 8002b1a:	f000 f82b 	bl	8002b74 <HAL_TIM_MspPostInit>

}
 8002b1e:	bf00      	nop
 8002b20:	3758      	adds	r7, #88	; 0x58
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000224 	.word	0x20000224
 8002b2c:	40010000 	.word	0x40010000

08002b30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <HAL_TIM_Base_MspInit+0x3c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10d      	bne.n	8002b5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_TIM_Base_MspInit+0x40>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <HAL_TIM_Base_MspInit+0x40>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6453      	str	r3, [r2, #68]	; 0x44
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_TIM_Base_MspInit+0x40>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40023800 	.word	0x40023800

08002b74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 030c 	add.w	r3, r7, #12
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <HAL_TIM_MspPostInit+0x68>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d11e      	bne.n	8002bd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_TIM_MspPostInit+0x6c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_TIM_MspPostInit+0x6c>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_TIM_MspPostInit+0x6c>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	f107 030c 	add.w	r3, r7, #12
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4805      	ldr	r0, [pc, #20]	; (8002be4 <HAL_TIM_MspPostInit+0x70>)
 8002bd0:	f7fe fa98 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bd4:	bf00      	nop
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40020000 	.word	0x40020000

08002be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bee:	e003      	b.n	8002bf8 <LoopCopyDataInit>

08002bf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bf6:	3104      	adds	r1, #4

08002bf8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bf8:	480b      	ldr	r0, [pc, #44]	; (8002c28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002bfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c00:	d3f6      	bcc.n	8002bf0 <CopyDataInit>
  ldr  r2, =_sbss
 8002c02:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c04:	e002      	b.n	8002c0c <LoopFillZerobss>

08002c06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c08:	f842 3b04 	str.w	r3, [r2], #4

08002c0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c10:	d3f9      	bcc.n	8002c06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c12:	f7ff feb7 	bl	8002984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c16:	f000 f817 	bl	8002c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c1a:	f7ff fd89 	bl	8002730 <main>
  bx  lr    
 8002c1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c24:	08004950 	.word	0x08004950
  ldr  r0, =_sdata
 8002c28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c2c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002c30:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002c34:	20000268 	.word	0x20000268

08002c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c38:	e7fe      	b.n	8002c38 <ADC_IRQHandler>
	...

08002c3c <__errno>:
 8002c3c:	4b01      	ldr	r3, [pc, #4]	; (8002c44 <__errno+0x8>)
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	2000000c 	.word	0x2000000c

08002c48 <__libc_init_array>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	4e0d      	ldr	r6, [pc, #52]	; (8002c80 <__libc_init_array+0x38>)
 8002c4c:	4c0d      	ldr	r4, [pc, #52]	; (8002c84 <__libc_init_array+0x3c>)
 8002c4e:	1ba4      	subs	r4, r4, r6
 8002c50:	10a4      	asrs	r4, r4, #2
 8002c52:	2500      	movs	r5, #0
 8002c54:	42a5      	cmp	r5, r4
 8002c56:	d109      	bne.n	8002c6c <__libc_init_array+0x24>
 8002c58:	4e0b      	ldr	r6, [pc, #44]	; (8002c88 <__libc_init_array+0x40>)
 8002c5a:	4c0c      	ldr	r4, [pc, #48]	; (8002c8c <__libc_init_array+0x44>)
 8002c5c:	f001 fd46 	bl	80046ec <_init>
 8002c60:	1ba4      	subs	r4, r4, r6
 8002c62:	10a4      	asrs	r4, r4, #2
 8002c64:	2500      	movs	r5, #0
 8002c66:	42a5      	cmp	r5, r4
 8002c68:	d105      	bne.n	8002c76 <__libc_init_array+0x2e>
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c70:	4798      	blx	r3
 8002c72:	3501      	adds	r5, #1
 8002c74:	e7ee      	b.n	8002c54 <__libc_init_array+0xc>
 8002c76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c7a:	4798      	blx	r3
 8002c7c:	3501      	adds	r5, #1
 8002c7e:	e7f2      	b.n	8002c66 <__libc_init_array+0x1e>
 8002c80:	08004948 	.word	0x08004948
 8002c84:	08004948 	.word	0x08004948
 8002c88:	08004948 	.word	0x08004948
 8002c8c:	0800494c 	.word	0x0800494c

08002c90 <memset>:
 8002c90:	4402      	add	r2, r0
 8002c92:	4603      	mov	r3, r0
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d100      	bne.n	8002c9a <memset+0xa>
 8002c98:	4770      	bx	lr
 8002c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c9e:	e7f9      	b.n	8002c94 <memset+0x4>

08002ca0 <__cvt>:
 8002ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ca4:	ec55 4b10 	vmov	r4, r5, d0
 8002ca8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002caa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002cae:	2d00      	cmp	r5, #0
 8002cb0:	460e      	mov	r6, r1
 8002cb2:	4691      	mov	r9, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	bfb8      	it	lt
 8002cb8:	4622      	movlt	r2, r4
 8002cba:	462b      	mov	r3, r5
 8002cbc:	f027 0720 	bic.w	r7, r7, #32
 8002cc0:	bfbb      	ittet	lt
 8002cc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002cc6:	461d      	movlt	r5, r3
 8002cc8:	2300      	movge	r3, #0
 8002cca:	232d      	movlt	r3, #45	; 0x2d
 8002ccc:	bfb8      	it	lt
 8002cce:	4614      	movlt	r4, r2
 8002cd0:	2f46      	cmp	r7, #70	; 0x46
 8002cd2:	700b      	strb	r3, [r1, #0]
 8002cd4:	d004      	beq.n	8002ce0 <__cvt+0x40>
 8002cd6:	2f45      	cmp	r7, #69	; 0x45
 8002cd8:	d100      	bne.n	8002cdc <__cvt+0x3c>
 8002cda:	3601      	adds	r6, #1
 8002cdc:	2102      	movs	r1, #2
 8002cde:	e000      	b.n	8002ce2 <__cvt+0x42>
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	ab03      	add	r3, sp, #12
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	ab02      	add	r3, sp, #8
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	4632      	mov	r2, r6
 8002cec:	4653      	mov	r3, sl
 8002cee:	ec45 4b10 	vmov	d0, r4, r5
 8002cf2:	f000 fbad 	bl	8003450 <_dtoa_r>
 8002cf6:	2f47      	cmp	r7, #71	; 0x47
 8002cf8:	4680      	mov	r8, r0
 8002cfa:	d102      	bne.n	8002d02 <__cvt+0x62>
 8002cfc:	f019 0f01 	tst.w	r9, #1
 8002d00:	d026      	beq.n	8002d50 <__cvt+0xb0>
 8002d02:	2f46      	cmp	r7, #70	; 0x46
 8002d04:	eb08 0906 	add.w	r9, r8, r6
 8002d08:	d111      	bne.n	8002d2e <__cvt+0x8e>
 8002d0a:	f898 3000 	ldrb.w	r3, [r8]
 8002d0e:	2b30      	cmp	r3, #48	; 0x30
 8002d10:	d10a      	bne.n	8002d28 <__cvt+0x88>
 8002d12:	2200      	movs	r2, #0
 8002d14:	2300      	movs	r3, #0
 8002d16:	4620      	mov	r0, r4
 8002d18:	4629      	mov	r1, r5
 8002d1a:	f7fd fe89 	bl	8000a30 <__aeabi_dcmpeq>
 8002d1e:	b918      	cbnz	r0, 8002d28 <__cvt+0x88>
 8002d20:	f1c6 0601 	rsb	r6, r6, #1
 8002d24:	f8ca 6000 	str.w	r6, [sl]
 8002d28:	f8da 3000 	ldr.w	r3, [sl]
 8002d2c:	4499      	add	r9, r3
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2300      	movs	r3, #0
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f7fd fe7b 	bl	8000a30 <__aeabi_dcmpeq>
 8002d3a:	b938      	cbnz	r0, 8002d4c <__cvt+0xac>
 8002d3c:	2230      	movs	r2, #48	; 0x30
 8002d3e:	9b03      	ldr	r3, [sp, #12]
 8002d40:	454b      	cmp	r3, r9
 8002d42:	d205      	bcs.n	8002d50 <__cvt+0xb0>
 8002d44:	1c59      	adds	r1, r3, #1
 8002d46:	9103      	str	r1, [sp, #12]
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e7f8      	b.n	8002d3e <__cvt+0x9e>
 8002d4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002d50:	9b03      	ldr	r3, [sp, #12]
 8002d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d54:	eba3 0308 	sub.w	r3, r3, r8
 8002d58:	4640      	mov	r0, r8
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	b004      	add	sp, #16
 8002d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d62 <__exponent>:
 8002d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d64:	2900      	cmp	r1, #0
 8002d66:	4604      	mov	r4, r0
 8002d68:	bfba      	itte	lt
 8002d6a:	4249      	neglt	r1, r1
 8002d6c:	232d      	movlt	r3, #45	; 0x2d
 8002d6e:	232b      	movge	r3, #43	; 0x2b
 8002d70:	2909      	cmp	r1, #9
 8002d72:	f804 2b02 	strb.w	r2, [r4], #2
 8002d76:	7043      	strb	r3, [r0, #1]
 8002d78:	dd20      	ble.n	8002dbc <__exponent+0x5a>
 8002d7a:	f10d 0307 	add.w	r3, sp, #7
 8002d7e:	461f      	mov	r7, r3
 8002d80:	260a      	movs	r6, #10
 8002d82:	fb91 f5f6 	sdiv	r5, r1, r6
 8002d86:	fb06 1115 	mls	r1, r6, r5, r1
 8002d8a:	3130      	adds	r1, #48	; 0x30
 8002d8c:	2d09      	cmp	r5, #9
 8002d8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002d92:	f103 32ff 	add.w	r2, r3, #4294967295
 8002d96:	4629      	mov	r1, r5
 8002d98:	dc09      	bgt.n	8002dae <__exponent+0x4c>
 8002d9a:	3130      	adds	r1, #48	; 0x30
 8002d9c:	3b02      	subs	r3, #2
 8002d9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002da2:	42bb      	cmp	r3, r7
 8002da4:	4622      	mov	r2, r4
 8002da6:	d304      	bcc.n	8002db2 <__exponent+0x50>
 8002da8:	1a10      	subs	r0, r2, r0
 8002daa:	b003      	add	sp, #12
 8002dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dae:	4613      	mov	r3, r2
 8002db0:	e7e7      	b.n	8002d82 <__exponent+0x20>
 8002db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002db6:	f804 2b01 	strb.w	r2, [r4], #1
 8002dba:	e7f2      	b.n	8002da2 <__exponent+0x40>
 8002dbc:	2330      	movs	r3, #48	; 0x30
 8002dbe:	4419      	add	r1, r3
 8002dc0:	7083      	strb	r3, [r0, #2]
 8002dc2:	1d02      	adds	r2, r0, #4
 8002dc4:	70c1      	strb	r1, [r0, #3]
 8002dc6:	e7ef      	b.n	8002da8 <__exponent+0x46>

08002dc8 <_printf_float>:
 8002dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dcc:	b08d      	sub	sp, #52	; 0x34
 8002dce:	460c      	mov	r4, r1
 8002dd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002dd4:	4616      	mov	r6, r2
 8002dd6:	461f      	mov	r7, r3
 8002dd8:	4605      	mov	r5, r0
 8002dda:	f001 f8f1 	bl	8003fc0 <_localeconv_r>
 8002dde:	6803      	ldr	r3, [r0, #0]
 8002de0:	9304      	str	r3, [sp, #16]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd f9f8 	bl	80001d8 <strlen>
 8002de8:	2300      	movs	r3, #0
 8002dea:	930a      	str	r3, [sp, #40]	; 0x28
 8002dec:	f8d8 3000 	ldr.w	r3, [r8]
 8002df0:	9005      	str	r0, [sp, #20]
 8002df2:	3307      	adds	r3, #7
 8002df4:	f023 0307 	bic.w	r3, r3, #7
 8002df8:	f103 0208 	add.w	r2, r3, #8
 8002dfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002e00:	f8d4 b000 	ldr.w	fp, [r4]
 8002e04:	f8c8 2000 	str.w	r2, [r8]
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002e10:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002e14:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002e18:	9307      	str	r3, [sp, #28]
 8002e1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8002e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e22:	4ba7      	ldr	r3, [pc, #668]	; (80030c0 <_printf_float+0x2f8>)
 8002e24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e28:	f7fd fe34 	bl	8000a94 <__aeabi_dcmpun>
 8002e2c:	bb70      	cbnz	r0, 8002e8c <_printf_float+0xc4>
 8002e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e32:	4ba3      	ldr	r3, [pc, #652]	; (80030c0 <_printf_float+0x2f8>)
 8002e34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e38:	f7fd fe0e 	bl	8000a58 <__aeabi_dcmple>
 8002e3c:	bb30      	cbnz	r0, 8002e8c <_printf_float+0xc4>
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2300      	movs	r3, #0
 8002e42:	4640      	mov	r0, r8
 8002e44:	4649      	mov	r1, r9
 8002e46:	f7fd fdfd 	bl	8000a44 <__aeabi_dcmplt>
 8002e4a:	b110      	cbz	r0, 8002e52 <_printf_float+0x8a>
 8002e4c:	232d      	movs	r3, #45	; 0x2d
 8002e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e52:	4a9c      	ldr	r2, [pc, #624]	; (80030c4 <_printf_float+0x2fc>)
 8002e54:	4b9c      	ldr	r3, [pc, #624]	; (80030c8 <_printf_float+0x300>)
 8002e56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002e5a:	bf8c      	ite	hi
 8002e5c:	4690      	movhi	r8, r2
 8002e5e:	4698      	movls	r8, r3
 8002e60:	2303      	movs	r3, #3
 8002e62:	f02b 0204 	bic.w	r2, fp, #4
 8002e66:	6123      	str	r3, [r4, #16]
 8002e68:	6022      	str	r2, [r4, #0]
 8002e6a:	f04f 0900 	mov.w	r9, #0
 8002e6e:	9700      	str	r7, [sp, #0]
 8002e70:	4633      	mov	r3, r6
 8002e72:	aa0b      	add	r2, sp, #44	; 0x2c
 8002e74:	4621      	mov	r1, r4
 8002e76:	4628      	mov	r0, r5
 8002e78:	f000 f9e6 	bl	8003248 <_printf_common>
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	f040 808d 	bne.w	8002f9c <_printf_float+0x1d4>
 8002e82:	f04f 30ff 	mov.w	r0, #4294967295
 8002e86:	b00d      	add	sp, #52	; 0x34
 8002e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	464b      	mov	r3, r9
 8002e90:	4640      	mov	r0, r8
 8002e92:	4649      	mov	r1, r9
 8002e94:	f7fd fdfe 	bl	8000a94 <__aeabi_dcmpun>
 8002e98:	b110      	cbz	r0, 8002ea0 <_printf_float+0xd8>
 8002e9a:	4a8c      	ldr	r2, [pc, #560]	; (80030cc <_printf_float+0x304>)
 8002e9c:	4b8c      	ldr	r3, [pc, #560]	; (80030d0 <_printf_float+0x308>)
 8002e9e:	e7da      	b.n	8002e56 <_printf_float+0x8e>
 8002ea0:	6861      	ldr	r1, [r4, #4]
 8002ea2:	1c4b      	adds	r3, r1, #1
 8002ea4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002ea8:	a80a      	add	r0, sp, #40	; 0x28
 8002eaa:	d13e      	bne.n	8002f2a <_printf_float+0x162>
 8002eac:	2306      	movs	r3, #6
 8002eae:	6063      	str	r3, [r4, #4]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002eb6:	ab09      	add	r3, sp, #36	; 0x24
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	ec49 8b10 	vmov	d0, r8, r9
 8002ebe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002ec2:	6022      	str	r2, [r4, #0]
 8002ec4:	f8cd a004 	str.w	sl, [sp, #4]
 8002ec8:	6861      	ldr	r1, [r4, #4]
 8002eca:	4628      	mov	r0, r5
 8002ecc:	f7ff fee8 	bl	8002ca0 <__cvt>
 8002ed0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002ed4:	2b47      	cmp	r3, #71	; 0x47
 8002ed6:	4680      	mov	r8, r0
 8002ed8:	d109      	bne.n	8002eee <_printf_float+0x126>
 8002eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002edc:	1cd8      	adds	r0, r3, #3
 8002ede:	db02      	blt.n	8002ee6 <_printf_float+0x11e>
 8002ee0:	6862      	ldr	r2, [r4, #4]
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	dd47      	ble.n	8002f76 <_printf_float+0x1ae>
 8002ee6:	f1aa 0a02 	sub.w	sl, sl, #2
 8002eea:	fa5f fa8a 	uxtb.w	sl, sl
 8002eee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ef4:	d824      	bhi.n	8002f40 <_printf_float+0x178>
 8002ef6:	3901      	subs	r1, #1
 8002ef8:	4652      	mov	r2, sl
 8002efa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002efe:	9109      	str	r1, [sp, #36]	; 0x24
 8002f00:	f7ff ff2f 	bl	8002d62 <__exponent>
 8002f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f06:	1813      	adds	r3, r2, r0
 8002f08:	2a01      	cmp	r2, #1
 8002f0a:	4681      	mov	r9, r0
 8002f0c:	6123      	str	r3, [r4, #16]
 8002f0e:	dc02      	bgt.n	8002f16 <_printf_float+0x14e>
 8002f10:	6822      	ldr	r2, [r4, #0]
 8002f12:	07d1      	lsls	r1, r2, #31
 8002f14:	d501      	bpl.n	8002f1a <_printf_float+0x152>
 8002f16:	3301      	adds	r3, #1
 8002f18:	6123      	str	r3, [r4, #16]
 8002f1a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0a5      	beq.n	8002e6e <_printf_float+0xa6>
 8002f22:	232d      	movs	r3, #45	; 0x2d
 8002f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f28:	e7a1      	b.n	8002e6e <_printf_float+0xa6>
 8002f2a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002f2e:	f000 8177 	beq.w	8003220 <_printf_float+0x458>
 8002f32:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002f36:	d1bb      	bne.n	8002eb0 <_printf_float+0xe8>
 8002f38:	2900      	cmp	r1, #0
 8002f3a:	d1b9      	bne.n	8002eb0 <_printf_float+0xe8>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e7b6      	b.n	8002eae <_printf_float+0xe6>
 8002f40:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002f44:	d119      	bne.n	8002f7a <_printf_float+0x1b2>
 8002f46:	2900      	cmp	r1, #0
 8002f48:	6863      	ldr	r3, [r4, #4]
 8002f4a:	dd0c      	ble.n	8002f66 <_printf_float+0x19e>
 8002f4c:	6121      	str	r1, [r4, #16]
 8002f4e:	b913      	cbnz	r3, 8002f56 <_printf_float+0x18e>
 8002f50:	6822      	ldr	r2, [r4, #0]
 8002f52:	07d2      	lsls	r2, r2, #31
 8002f54:	d502      	bpl.n	8002f5c <_printf_float+0x194>
 8002f56:	3301      	adds	r3, #1
 8002f58:	440b      	add	r3, r1
 8002f5a:	6123      	str	r3, [r4, #16]
 8002f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f5e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f60:	f04f 0900 	mov.w	r9, #0
 8002f64:	e7d9      	b.n	8002f1a <_printf_float+0x152>
 8002f66:	b913      	cbnz	r3, 8002f6e <_printf_float+0x1a6>
 8002f68:	6822      	ldr	r2, [r4, #0]
 8002f6a:	07d0      	lsls	r0, r2, #31
 8002f6c:	d501      	bpl.n	8002f72 <_printf_float+0x1aa>
 8002f6e:	3302      	adds	r3, #2
 8002f70:	e7f3      	b.n	8002f5a <_printf_float+0x192>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e7f1      	b.n	8002f5a <_printf_float+0x192>
 8002f76:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002f7a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	db05      	blt.n	8002f8e <_printf_float+0x1c6>
 8002f82:	6822      	ldr	r2, [r4, #0]
 8002f84:	6123      	str	r3, [r4, #16]
 8002f86:	07d1      	lsls	r1, r2, #31
 8002f88:	d5e8      	bpl.n	8002f5c <_printf_float+0x194>
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	e7e5      	b.n	8002f5a <_printf_float+0x192>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bfd4      	ite	le
 8002f92:	f1c3 0302 	rsble	r3, r3, #2
 8002f96:	2301      	movgt	r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	e7de      	b.n	8002f5a <_printf_float+0x192>
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	055a      	lsls	r2, r3, #21
 8002fa0:	d407      	bmi.n	8002fb2 <_printf_float+0x1ea>
 8002fa2:	6923      	ldr	r3, [r4, #16]
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	4631      	mov	r1, r6
 8002fa8:	4628      	mov	r0, r5
 8002faa:	47b8      	blx	r7
 8002fac:	3001      	adds	r0, #1
 8002fae:	d12b      	bne.n	8003008 <_printf_float+0x240>
 8002fb0:	e767      	b.n	8002e82 <_printf_float+0xba>
 8002fb2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002fb6:	f240 80dc 	bls.w	8003172 <_printf_float+0x3aa>
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fc2:	f7fd fd35 	bl	8000a30 <__aeabi_dcmpeq>
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d033      	beq.n	8003032 <_printf_float+0x26a>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	4a41      	ldr	r2, [pc, #260]	; (80030d4 <_printf_float+0x30c>)
 8002fce:	4631      	mov	r1, r6
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	47b8      	blx	r7
 8002fd4:	3001      	adds	r0, #1
 8002fd6:	f43f af54 	beq.w	8002e82 <_printf_float+0xba>
 8002fda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	db02      	blt.n	8002fe8 <_printf_float+0x220>
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	07d8      	lsls	r0, r3, #31
 8002fe6:	d50f      	bpl.n	8003008 <_printf_float+0x240>
 8002fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fec:	4631      	mov	r1, r6
 8002fee:	4628      	mov	r0, r5
 8002ff0:	47b8      	blx	r7
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	f43f af45 	beq.w	8002e82 <_printf_float+0xba>
 8002ff8:	f04f 0800 	mov.w	r8, #0
 8002ffc:	f104 091a 	add.w	r9, r4, #26
 8003000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003002:	3b01      	subs	r3, #1
 8003004:	4543      	cmp	r3, r8
 8003006:	dc09      	bgt.n	800301c <_printf_float+0x254>
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	079b      	lsls	r3, r3, #30
 800300c:	f100 8103 	bmi.w	8003216 <_printf_float+0x44e>
 8003010:	68e0      	ldr	r0, [r4, #12]
 8003012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003014:	4298      	cmp	r0, r3
 8003016:	bfb8      	it	lt
 8003018:	4618      	movlt	r0, r3
 800301a:	e734      	b.n	8002e86 <_printf_float+0xbe>
 800301c:	2301      	movs	r3, #1
 800301e:	464a      	mov	r2, r9
 8003020:	4631      	mov	r1, r6
 8003022:	4628      	mov	r0, r5
 8003024:	47b8      	blx	r7
 8003026:	3001      	adds	r0, #1
 8003028:	f43f af2b 	beq.w	8002e82 <_printf_float+0xba>
 800302c:	f108 0801 	add.w	r8, r8, #1
 8003030:	e7e6      	b.n	8003000 <_printf_float+0x238>
 8003032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003034:	2b00      	cmp	r3, #0
 8003036:	dc2b      	bgt.n	8003090 <_printf_float+0x2c8>
 8003038:	2301      	movs	r3, #1
 800303a:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <_printf_float+0x30c>)
 800303c:	4631      	mov	r1, r6
 800303e:	4628      	mov	r0, r5
 8003040:	47b8      	blx	r7
 8003042:	3001      	adds	r0, #1
 8003044:	f43f af1d 	beq.w	8002e82 <_printf_float+0xba>
 8003048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800304a:	b923      	cbnz	r3, 8003056 <_printf_float+0x28e>
 800304c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800304e:	b913      	cbnz	r3, 8003056 <_printf_float+0x28e>
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	07d9      	lsls	r1, r3, #31
 8003054:	d5d8      	bpl.n	8003008 <_printf_float+0x240>
 8003056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800305a:	4631      	mov	r1, r6
 800305c:	4628      	mov	r0, r5
 800305e:	47b8      	blx	r7
 8003060:	3001      	adds	r0, #1
 8003062:	f43f af0e 	beq.w	8002e82 <_printf_float+0xba>
 8003066:	f04f 0900 	mov.w	r9, #0
 800306a:	f104 0a1a 	add.w	sl, r4, #26
 800306e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003070:	425b      	negs	r3, r3
 8003072:	454b      	cmp	r3, r9
 8003074:	dc01      	bgt.n	800307a <_printf_float+0x2b2>
 8003076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003078:	e794      	b.n	8002fa4 <_printf_float+0x1dc>
 800307a:	2301      	movs	r3, #1
 800307c:	4652      	mov	r2, sl
 800307e:	4631      	mov	r1, r6
 8003080:	4628      	mov	r0, r5
 8003082:	47b8      	blx	r7
 8003084:	3001      	adds	r0, #1
 8003086:	f43f aefc 	beq.w	8002e82 <_printf_float+0xba>
 800308a:	f109 0901 	add.w	r9, r9, #1
 800308e:	e7ee      	b.n	800306e <_printf_float+0x2a6>
 8003090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003094:	429a      	cmp	r2, r3
 8003096:	bfa8      	it	ge
 8003098:	461a      	movge	r2, r3
 800309a:	2a00      	cmp	r2, #0
 800309c:	4691      	mov	r9, r2
 800309e:	dd07      	ble.n	80030b0 <_printf_float+0x2e8>
 80030a0:	4613      	mov	r3, r2
 80030a2:	4631      	mov	r1, r6
 80030a4:	4642      	mov	r2, r8
 80030a6:	4628      	mov	r0, r5
 80030a8:	47b8      	blx	r7
 80030aa:	3001      	adds	r0, #1
 80030ac:	f43f aee9 	beq.w	8002e82 <_printf_float+0xba>
 80030b0:	f104 031a 	add.w	r3, r4, #26
 80030b4:	f04f 0b00 	mov.w	fp, #0
 80030b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030bc:	9306      	str	r3, [sp, #24]
 80030be:	e015      	b.n	80030ec <_printf_float+0x324>
 80030c0:	7fefffff 	.word	0x7fefffff
 80030c4:	0800471c 	.word	0x0800471c
 80030c8:	08004718 	.word	0x08004718
 80030cc:	08004724 	.word	0x08004724
 80030d0:	08004720 	.word	0x08004720
 80030d4:	08004728 	.word	0x08004728
 80030d8:	2301      	movs	r3, #1
 80030da:	9a06      	ldr	r2, [sp, #24]
 80030dc:	4631      	mov	r1, r6
 80030de:	4628      	mov	r0, r5
 80030e0:	47b8      	blx	r7
 80030e2:	3001      	adds	r0, #1
 80030e4:	f43f aecd 	beq.w	8002e82 <_printf_float+0xba>
 80030e8:	f10b 0b01 	add.w	fp, fp, #1
 80030ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80030f0:	ebaa 0309 	sub.w	r3, sl, r9
 80030f4:	455b      	cmp	r3, fp
 80030f6:	dcef      	bgt.n	80030d8 <_printf_float+0x310>
 80030f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030fc:	429a      	cmp	r2, r3
 80030fe:	44d0      	add	r8, sl
 8003100:	db15      	blt.n	800312e <_printf_float+0x366>
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	07da      	lsls	r2, r3, #31
 8003106:	d412      	bmi.n	800312e <_printf_float+0x366>
 8003108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800310a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800310c:	eba3 020a 	sub.w	r2, r3, sl
 8003110:	eba3 0a01 	sub.w	sl, r3, r1
 8003114:	4592      	cmp	sl, r2
 8003116:	bfa8      	it	ge
 8003118:	4692      	movge	sl, r2
 800311a:	f1ba 0f00 	cmp.w	sl, #0
 800311e:	dc0e      	bgt.n	800313e <_printf_float+0x376>
 8003120:	f04f 0800 	mov.w	r8, #0
 8003124:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003128:	f104 091a 	add.w	r9, r4, #26
 800312c:	e019      	b.n	8003162 <_printf_float+0x39a>
 800312e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003132:	4631      	mov	r1, r6
 8003134:	4628      	mov	r0, r5
 8003136:	47b8      	blx	r7
 8003138:	3001      	adds	r0, #1
 800313a:	d1e5      	bne.n	8003108 <_printf_float+0x340>
 800313c:	e6a1      	b.n	8002e82 <_printf_float+0xba>
 800313e:	4653      	mov	r3, sl
 8003140:	4642      	mov	r2, r8
 8003142:	4631      	mov	r1, r6
 8003144:	4628      	mov	r0, r5
 8003146:	47b8      	blx	r7
 8003148:	3001      	adds	r0, #1
 800314a:	d1e9      	bne.n	8003120 <_printf_float+0x358>
 800314c:	e699      	b.n	8002e82 <_printf_float+0xba>
 800314e:	2301      	movs	r3, #1
 8003150:	464a      	mov	r2, r9
 8003152:	4631      	mov	r1, r6
 8003154:	4628      	mov	r0, r5
 8003156:	47b8      	blx	r7
 8003158:	3001      	adds	r0, #1
 800315a:	f43f ae92 	beq.w	8002e82 <_printf_float+0xba>
 800315e:	f108 0801 	add.w	r8, r8, #1
 8003162:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	eba3 030a 	sub.w	r3, r3, sl
 800316c:	4543      	cmp	r3, r8
 800316e:	dcee      	bgt.n	800314e <_printf_float+0x386>
 8003170:	e74a      	b.n	8003008 <_printf_float+0x240>
 8003172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003174:	2a01      	cmp	r2, #1
 8003176:	dc01      	bgt.n	800317c <_printf_float+0x3b4>
 8003178:	07db      	lsls	r3, r3, #31
 800317a:	d53a      	bpl.n	80031f2 <_printf_float+0x42a>
 800317c:	2301      	movs	r3, #1
 800317e:	4642      	mov	r2, r8
 8003180:	4631      	mov	r1, r6
 8003182:	4628      	mov	r0, r5
 8003184:	47b8      	blx	r7
 8003186:	3001      	adds	r0, #1
 8003188:	f43f ae7b 	beq.w	8002e82 <_printf_float+0xba>
 800318c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003190:	4631      	mov	r1, r6
 8003192:	4628      	mov	r0, r5
 8003194:	47b8      	blx	r7
 8003196:	3001      	adds	r0, #1
 8003198:	f108 0801 	add.w	r8, r8, #1
 800319c:	f43f ae71 	beq.w	8002e82 <_printf_float+0xba>
 80031a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031a2:	2200      	movs	r2, #0
 80031a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80031a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031ac:	2300      	movs	r3, #0
 80031ae:	f7fd fc3f 	bl	8000a30 <__aeabi_dcmpeq>
 80031b2:	b9c8      	cbnz	r0, 80031e8 <_printf_float+0x420>
 80031b4:	4653      	mov	r3, sl
 80031b6:	4642      	mov	r2, r8
 80031b8:	4631      	mov	r1, r6
 80031ba:	4628      	mov	r0, r5
 80031bc:	47b8      	blx	r7
 80031be:	3001      	adds	r0, #1
 80031c0:	d10e      	bne.n	80031e0 <_printf_float+0x418>
 80031c2:	e65e      	b.n	8002e82 <_printf_float+0xba>
 80031c4:	2301      	movs	r3, #1
 80031c6:	4652      	mov	r2, sl
 80031c8:	4631      	mov	r1, r6
 80031ca:	4628      	mov	r0, r5
 80031cc:	47b8      	blx	r7
 80031ce:	3001      	adds	r0, #1
 80031d0:	f43f ae57 	beq.w	8002e82 <_printf_float+0xba>
 80031d4:	f108 0801 	add.w	r8, r8, #1
 80031d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	4543      	cmp	r3, r8
 80031de:	dcf1      	bgt.n	80031c4 <_printf_float+0x3fc>
 80031e0:	464b      	mov	r3, r9
 80031e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80031e6:	e6de      	b.n	8002fa6 <_printf_float+0x1de>
 80031e8:	f04f 0800 	mov.w	r8, #0
 80031ec:	f104 0a1a 	add.w	sl, r4, #26
 80031f0:	e7f2      	b.n	80031d8 <_printf_float+0x410>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e7df      	b.n	80031b6 <_printf_float+0x3ee>
 80031f6:	2301      	movs	r3, #1
 80031f8:	464a      	mov	r2, r9
 80031fa:	4631      	mov	r1, r6
 80031fc:	4628      	mov	r0, r5
 80031fe:	47b8      	blx	r7
 8003200:	3001      	adds	r0, #1
 8003202:	f43f ae3e 	beq.w	8002e82 <_printf_float+0xba>
 8003206:	f108 0801 	add.w	r8, r8, #1
 800320a:	68e3      	ldr	r3, [r4, #12]
 800320c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	4543      	cmp	r3, r8
 8003212:	dcf0      	bgt.n	80031f6 <_printf_float+0x42e>
 8003214:	e6fc      	b.n	8003010 <_printf_float+0x248>
 8003216:	f04f 0800 	mov.w	r8, #0
 800321a:	f104 0919 	add.w	r9, r4, #25
 800321e:	e7f4      	b.n	800320a <_printf_float+0x442>
 8003220:	2900      	cmp	r1, #0
 8003222:	f43f ae8b 	beq.w	8002f3c <_printf_float+0x174>
 8003226:	2300      	movs	r3, #0
 8003228:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800322c:	ab09      	add	r3, sp, #36	; 0x24
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	ec49 8b10 	vmov	d0, r8, r9
 8003234:	6022      	str	r2, [r4, #0]
 8003236:	f8cd a004 	str.w	sl, [sp, #4]
 800323a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800323e:	4628      	mov	r0, r5
 8003240:	f7ff fd2e 	bl	8002ca0 <__cvt>
 8003244:	4680      	mov	r8, r0
 8003246:	e648      	b.n	8002eda <_printf_float+0x112>

08003248 <_printf_common>:
 8003248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800324c:	4691      	mov	r9, r2
 800324e:	461f      	mov	r7, r3
 8003250:	688a      	ldr	r2, [r1, #8]
 8003252:	690b      	ldr	r3, [r1, #16]
 8003254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003258:	4293      	cmp	r3, r2
 800325a:	bfb8      	it	lt
 800325c:	4613      	movlt	r3, r2
 800325e:	f8c9 3000 	str.w	r3, [r9]
 8003262:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003266:	4606      	mov	r6, r0
 8003268:	460c      	mov	r4, r1
 800326a:	b112      	cbz	r2, 8003272 <_printf_common+0x2a>
 800326c:	3301      	adds	r3, #1
 800326e:	f8c9 3000 	str.w	r3, [r9]
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	0699      	lsls	r1, r3, #26
 8003276:	bf42      	ittt	mi
 8003278:	f8d9 3000 	ldrmi.w	r3, [r9]
 800327c:	3302      	addmi	r3, #2
 800327e:	f8c9 3000 	strmi.w	r3, [r9]
 8003282:	6825      	ldr	r5, [r4, #0]
 8003284:	f015 0506 	ands.w	r5, r5, #6
 8003288:	d107      	bne.n	800329a <_printf_common+0x52>
 800328a:	f104 0a19 	add.w	sl, r4, #25
 800328e:	68e3      	ldr	r3, [r4, #12]
 8003290:	f8d9 2000 	ldr.w	r2, [r9]
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	42ab      	cmp	r3, r5
 8003298:	dc28      	bgt.n	80032ec <_printf_common+0xa4>
 800329a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	3300      	adds	r3, #0
 80032a2:	bf18      	it	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	0692      	lsls	r2, r2, #26
 80032a8:	d42d      	bmi.n	8003306 <_printf_common+0xbe>
 80032aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032ae:	4639      	mov	r1, r7
 80032b0:	4630      	mov	r0, r6
 80032b2:	47c0      	blx	r8
 80032b4:	3001      	adds	r0, #1
 80032b6:	d020      	beq.n	80032fa <_printf_common+0xb2>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	68e5      	ldr	r5, [r4, #12]
 80032bc:	f8d9 2000 	ldr.w	r2, [r9]
 80032c0:	f003 0306 	and.w	r3, r3, #6
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	bf08      	it	eq
 80032c8:	1aad      	subeq	r5, r5, r2
 80032ca:	68a3      	ldr	r3, [r4, #8]
 80032cc:	6922      	ldr	r2, [r4, #16]
 80032ce:	bf0c      	ite	eq
 80032d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032d4:	2500      	movne	r5, #0
 80032d6:	4293      	cmp	r3, r2
 80032d8:	bfc4      	itt	gt
 80032da:	1a9b      	subgt	r3, r3, r2
 80032dc:	18ed      	addgt	r5, r5, r3
 80032de:	f04f 0900 	mov.w	r9, #0
 80032e2:	341a      	adds	r4, #26
 80032e4:	454d      	cmp	r5, r9
 80032e6:	d11a      	bne.n	800331e <_printf_common+0xd6>
 80032e8:	2000      	movs	r0, #0
 80032ea:	e008      	b.n	80032fe <_printf_common+0xb6>
 80032ec:	2301      	movs	r3, #1
 80032ee:	4652      	mov	r2, sl
 80032f0:	4639      	mov	r1, r7
 80032f2:	4630      	mov	r0, r6
 80032f4:	47c0      	blx	r8
 80032f6:	3001      	adds	r0, #1
 80032f8:	d103      	bne.n	8003302 <_printf_common+0xba>
 80032fa:	f04f 30ff 	mov.w	r0, #4294967295
 80032fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003302:	3501      	adds	r5, #1
 8003304:	e7c3      	b.n	800328e <_printf_common+0x46>
 8003306:	18e1      	adds	r1, r4, r3
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	2030      	movs	r0, #48	; 0x30
 800330c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003310:	4422      	add	r2, r4
 8003312:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003316:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800331a:	3302      	adds	r3, #2
 800331c:	e7c5      	b.n	80032aa <_printf_common+0x62>
 800331e:	2301      	movs	r3, #1
 8003320:	4622      	mov	r2, r4
 8003322:	4639      	mov	r1, r7
 8003324:	4630      	mov	r0, r6
 8003326:	47c0      	blx	r8
 8003328:	3001      	adds	r0, #1
 800332a:	d0e6      	beq.n	80032fa <_printf_common+0xb2>
 800332c:	f109 0901 	add.w	r9, r9, #1
 8003330:	e7d8      	b.n	80032e4 <_printf_common+0x9c>

08003332 <quorem>:
 8003332:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003336:	6903      	ldr	r3, [r0, #16]
 8003338:	690c      	ldr	r4, [r1, #16]
 800333a:	42a3      	cmp	r3, r4
 800333c:	4680      	mov	r8, r0
 800333e:	f2c0 8082 	blt.w	8003446 <quorem+0x114>
 8003342:	3c01      	subs	r4, #1
 8003344:	f101 0714 	add.w	r7, r1, #20
 8003348:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800334c:	f100 0614 	add.w	r6, r0, #20
 8003350:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003354:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003358:	eb06 030c 	add.w	r3, r6, ip
 800335c:	3501      	adds	r5, #1
 800335e:	eb07 090c 	add.w	r9, r7, ip
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	fbb0 f5f5 	udiv	r5, r0, r5
 8003368:	b395      	cbz	r5, 80033d0 <quorem+0x9e>
 800336a:	f04f 0a00 	mov.w	sl, #0
 800336e:	4638      	mov	r0, r7
 8003370:	46b6      	mov	lr, r6
 8003372:	46d3      	mov	fp, sl
 8003374:	f850 2b04 	ldr.w	r2, [r0], #4
 8003378:	b293      	uxth	r3, r2
 800337a:	fb05 a303 	mla	r3, r5, r3, sl
 800337e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003382:	b29b      	uxth	r3, r3
 8003384:	ebab 0303 	sub.w	r3, fp, r3
 8003388:	0c12      	lsrs	r2, r2, #16
 800338a:	f8de b000 	ldr.w	fp, [lr]
 800338e:	fb05 a202 	mla	r2, r5, r2, sl
 8003392:	fa13 f38b 	uxtah	r3, r3, fp
 8003396:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800339a:	fa1f fb82 	uxth.w	fp, r2
 800339e:	f8de 2000 	ldr.w	r2, [lr]
 80033a2:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80033a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033b0:	4581      	cmp	r9, r0
 80033b2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80033b6:	f84e 3b04 	str.w	r3, [lr], #4
 80033ba:	d2db      	bcs.n	8003374 <quorem+0x42>
 80033bc:	f856 300c 	ldr.w	r3, [r6, ip]
 80033c0:	b933      	cbnz	r3, 80033d0 <quorem+0x9e>
 80033c2:	9b01      	ldr	r3, [sp, #4]
 80033c4:	3b04      	subs	r3, #4
 80033c6:	429e      	cmp	r6, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	d330      	bcc.n	800342e <quorem+0xfc>
 80033cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80033d0:	4640      	mov	r0, r8
 80033d2:	f001 f82b 	bl	800442c <__mcmp>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	db25      	blt.n	8003426 <quorem+0xf4>
 80033da:	3501      	adds	r5, #1
 80033dc:	4630      	mov	r0, r6
 80033de:	f04f 0c00 	mov.w	ip, #0
 80033e2:	f857 2b04 	ldr.w	r2, [r7], #4
 80033e6:	f8d0 e000 	ldr.w	lr, [r0]
 80033ea:	b293      	uxth	r3, r2
 80033ec:	ebac 0303 	sub.w	r3, ip, r3
 80033f0:	0c12      	lsrs	r2, r2, #16
 80033f2:	fa13 f38e 	uxtah	r3, r3, lr
 80033f6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80033fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033fe:	b29b      	uxth	r3, r3
 8003400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003404:	45b9      	cmp	r9, r7
 8003406:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800340a:	f840 3b04 	str.w	r3, [r0], #4
 800340e:	d2e8      	bcs.n	80033e2 <quorem+0xb0>
 8003410:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003414:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003418:	b92a      	cbnz	r2, 8003426 <quorem+0xf4>
 800341a:	3b04      	subs	r3, #4
 800341c:	429e      	cmp	r6, r3
 800341e:	461a      	mov	r2, r3
 8003420:	d30b      	bcc.n	800343a <quorem+0x108>
 8003422:	f8c8 4010 	str.w	r4, [r8, #16]
 8003426:	4628      	mov	r0, r5
 8003428:	b003      	add	sp, #12
 800342a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	3b04      	subs	r3, #4
 8003432:	2a00      	cmp	r2, #0
 8003434:	d1ca      	bne.n	80033cc <quorem+0x9a>
 8003436:	3c01      	subs	r4, #1
 8003438:	e7c5      	b.n	80033c6 <quorem+0x94>
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	3b04      	subs	r3, #4
 800343e:	2a00      	cmp	r2, #0
 8003440:	d1ef      	bne.n	8003422 <quorem+0xf0>
 8003442:	3c01      	subs	r4, #1
 8003444:	e7ea      	b.n	800341c <quorem+0xea>
 8003446:	2000      	movs	r0, #0
 8003448:	e7ee      	b.n	8003428 <quorem+0xf6>
 800344a:	0000      	movs	r0, r0
 800344c:	0000      	movs	r0, r0
	...

08003450 <_dtoa_r>:
 8003450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003454:	ec57 6b10 	vmov	r6, r7, d0
 8003458:	b097      	sub	sp, #92	; 0x5c
 800345a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800345c:	9106      	str	r1, [sp, #24]
 800345e:	4604      	mov	r4, r0
 8003460:	920b      	str	r2, [sp, #44]	; 0x2c
 8003462:	9312      	str	r3, [sp, #72]	; 0x48
 8003464:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003468:	e9cd 6700 	strd	r6, r7, [sp]
 800346c:	b93d      	cbnz	r5, 800347e <_dtoa_r+0x2e>
 800346e:	2010      	movs	r0, #16
 8003470:	f000 fdb4 	bl	8003fdc <malloc>
 8003474:	6260      	str	r0, [r4, #36]	; 0x24
 8003476:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800347a:	6005      	str	r5, [r0, #0]
 800347c:	60c5      	str	r5, [r0, #12]
 800347e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	b151      	cbz	r1, 800349a <_dtoa_r+0x4a>
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	604a      	str	r2, [r1, #4]
 8003488:	2301      	movs	r3, #1
 800348a:	4093      	lsls	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
 800348e:	4620      	mov	r0, r4
 8003490:	f000 fdeb 	bl	800406a <_Bfree>
 8003494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	1e3b      	subs	r3, r7, #0
 800349c:	bfbb      	ittet	lt
 800349e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80034a2:	9301      	strlt	r3, [sp, #4]
 80034a4:	2300      	movge	r3, #0
 80034a6:	2201      	movlt	r2, #1
 80034a8:	bfac      	ite	ge
 80034aa:	f8c8 3000 	strge.w	r3, [r8]
 80034ae:	f8c8 2000 	strlt.w	r2, [r8]
 80034b2:	4baf      	ldr	r3, [pc, #700]	; (8003770 <_dtoa_r+0x320>)
 80034b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80034b8:	ea33 0308 	bics.w	r3, r3, r8
 80034bc:	d114      	bne.n	80034e8 <_dtoa_r+0x98>
 80034be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	9b00      	ldr	r3, [sp, #0]
 80034c8:	b923      	cbnz	r3, 80034d4 <_dtoa_r+0x84>
 80034ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80034ce:	2800      	cmp	r0, #0
 80034d0:	f000 8542 	beq.w	8003f58 <_dtoa_r+0xb08>
 80034d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8003784 <_dtoa_r+0x334>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8544 	beq.w	8003f68 <_dtoa_r+0xb18>
 80034e0:	f10b 0303 	add.w	r3, fp, #3
 80034e4:	f000 bd3e 	b.w	8003f64 <_dtoa_r+0xb14>
 80034e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2300      	movs	r3, #0
 80034f0:	4630      	mov	r0, r6
 80034f2:	4639      	mov	r1, r7
 80034f4:	f7fd fa9c 	bl	8000a30 <__aeabi_dcmpeq>
 80034f8:	4681      	mov	r9, r0
 80034fa:	b168      	cbz	r0, 8003518 <_dtoa_r+0xc8>
 80034fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034fe:	2301      	movs	r3, #1
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8524 	beq.w	8003f52 <_dtoa_r+0xb02>
 800350a:	4b9a      	ldr	r3, [pc, #616]	; (8003774 <_dtoa_r+0x324>)
 800350c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800350e:	f103 3bff 	add.w	fp, r3, #4294967295
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	f000 bd28 	b.w	8003f68 <_dtoa_r+0xb18>
 8003518:	aa14      	add	r2, sp, #80	; 0x50
 800351a:	a915      	add	r1, sp, #84	; 0x54
 800351c:	ec47 6b10 	vmov	d0, r6, r7
 8003520:	4620      	mov	r0, r4
 8003522:	f000 fffa 	bl	800451a <__d2b>
 8003526:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800352a:	9004      	str	r0, [sp, #16]
 800352c:	2d00      	cmp	r5, #0
 800352e:	d07c      	beq.n	800362a <_dtoa_r+0x1da>
 8003530:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003534:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003538:	46b2      	mov	sl, r6
 800353a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800353e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003542:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003546:	2200      	movs	r2, #0
 8003548:	4b8b      	ldr	r3, [pc, #556]	; (8003778 <_dtoa_r+0x328>)
 800354a:	4650      	mov	r0, sl
 800354c:	4659      	mov	r1, fp
 800354e:	f7fc fe4f 	bl	80001f0 <__aeabi_dsub>
 8003552:	a381      	add	r3, pc, #516	; (adr r3, 8003758 <_dtoa_r+0x308>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f7fd f802 	bl	8000560 <__aeabi_dmul>
 800355c:	a380      	add	r3, pc, #512	; (adr r3, 8003760 <_dtoa_r+0x310>)
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f7fc fe47 	bl	80001f4 <__adddf3>
 8003566:	4606      	mov	r6, r0
 8003568:	4628      	mov	r0, r5
 800356a:	460f      	mov	r7, r1
 800356c:	f7fc ff8e 	bl	800048c <__aeabi_i2d>
 8003570:	a37d      	add	r3, pc, #500	; (adr r3, 8003768 <_dtoa_r+0x318>)
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f7fc fff3 	bl	8000560 <__aeabi_dmul>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4630      	mov	r0, r6
 8003580:	4639      	mov	r1, r7
 8003582:	f7fc fe37 	bl	80001f4 <__adddf3>
 8003586:	4606      	mov	r6, r0
 8003588:	460f      	mov	r7, r1
 800358a:	f7fd fa99 	bl	8000ac0 <__aeabi_d2iz>
 800358e:	2200      	movs	r2, #0
 8003590:	4682      	mov	sl, r0
 8003592:	2300      	movs	r3, #0
 8003594:	4630      	mov	r0, r6
 8003596:	4639      	mov	r1, r7
 8003598:	f7fd fa54 	bl	8000a44 <__aeabi_dcmplt>
 800359c:	b148      	cbz	r0, 80035b2 <_dtoa_r+0x162>
 800359e:	4650      	mov	r0, sl
 80035a0:	f7fc ff74 	bl	800048c <__aeabi_i2d>
 80035a4:	4632      	mov	r2, r6
 80035a6:	463b      	mov	r3, r7
 80035a8:	f7fd fa42 	bl	8000a30 <__aeabi_dcmpeq>
 80035ac:	b908      	cbnz	r0, 80035b2 <_dtoa_r+0x162>
 80035ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80035b2:	f1ba 0f16 	cmp.w	sl, #22
 80035b6:	d859      	bhi.n	800366c <_dtoa_r+0x21c>
 80035b8:	4970      	ldr	r1, [pc, #448]	; (800377c <_dtoa_r+0x32c>)
 80035ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80035be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035c6:	f7fd fa5b 	bl	8000a80 <__aeabi_dcmpgt>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d050      	beq.n	8003670 <_dtoa_r+0x220>
 80035ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80035d2:	2300      	movs	r3, #0
 80035d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80035d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80035d8:	1b5d      	subs	r5, r3, r5
 80035da:	f1b5 0801 	subs.w	r8, r5, #1
 80035de:	bf49      	itett	mi
 80035e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80035e4:	2300      	movpl	r3, #0
 80035e6:	9305      	strmi	r3, [sp, #20]
 80035e8:	f04f 0800 	movmi.w	r8, #0
 80035ec:	bf58      	it	pl
 80035ee:	9305      	strpl	r3, [sp, #20]
 80035f0:	f1ba 0f00 	cmp.w	sl, #0
 80035f4:	db3e      	blt.n	8003674 <_dtoa_r+0x224>
 80035f6:	2300      	movs	r3, #0
 80035f8:	44d0      	add	r8, sl
 80035fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80035fe:	9307      	str	r3, [sp, #28]
 8003600:	9b06      	ldr	r3, [sp, #24]
 8003602:	2b09      	cmp	r3, #9
 8003604:	f200 8090 	bhi.w	8003728 <_dtoa_r+0x2d8>
 8003608:	2b05      	cmp	r3, #5
 800360a:	bfc4      	itt	gt
 800360c:	3b04      	subgt	r3, #4
 800360e:	9306      	strgt	r3, [sp, #24]
 8003610:	9b06      	ldr	r3, [sp, #24]
 8003612:	f1a3 0302 	sub.w	r3, r3, #2
 8003616:	bfcc      	ite	gt
 8003618:	2500      	movgt	r5, #0
 800361a:	2501      	movle	r5, #1
 800361c:	2b03      	cmp	r3, #3
 800361e:	f200 808f 	bhi.w	8003740 <_dtoa_r+0x2f0>
 8003622:	e8df f003 	tbb	[pc, r3]
 8003626:	7f7d      	.short	0x7f7d
 8003628:	7131      	.short	0x7131
 800362a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800362e:	441d      	add	r5, r3
 8003630:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003634:	2820      	cmp	r0, #32
 8003636:	dd13      	ble.n	8003660 <_dtoa_r+0x210>
 8003638:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800363c:	9b00      	ldr	r3, [sp, #0]
 800363e:	fa08 f800 	lsl.w	r8, r8, r0
 8003642:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003646:	fa23 f000 	lsr.w	r0, r3, r0
 800364a:	ea48 0000 	orr.w	r0, r8, r0
 800364e:	f7fc ff0d 	bl	800046c <__aeabi_ui2d>
 8003652:	2301      	movs	r3, #1
 8003654:	4682      	mov	sl, r0
 8003656:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800365a:	3d01      	subs	r5, #1
 800365c:	9313      	str	r3, [sp, #76]	; 0x4c
 800365e:	e772      	b.n	8003546 <_dtoa_r+0xf6>
 8003660:	9b00      	ldr	r3, [sp, #0]
 8003662:	f1c0 0020 	rsb	r0, r0, #32
 8003666:	fa03 f000 	lsl.w	r0, r3, r0
 800366a:	e7f0      	b.n	800364e <_dtoa_r+0x1fe>
 800366c:	2301      	movs	r3, #1
 800366e:	e7b1      	b.n	80035d4 <_dtoa_r+0x184>
 8003670:	900f      	str	r0, [sp, #60]	; 0x3c
 8003672:	e7b0      	b.n	80035d6 <_dtoa_r+0x186>
 8003674:	9b05      	ldr	r3, [sp, #20]
 8003676:	eba3 030a 	sub.w	r3, r3, sl
 800367a:	9305      	str	r3, [sp, #20]
 800367c:	f1ca 0300 	rsb	r3, sl, #0
 8003680:	9307      	str	r3, [sp, #28]
 8003682:	2300      	movs	r3, #0
 8003684:	930e      	str	r3, [sp, #56]	; 0x38
 8003686:	e7bb      	b.n	8003600 <_dtoa_r+0x1b0>
 8003688:	2301      	movs	r3, #1
 800368a:	930a      	str	r3, [sp, #40]	; 0x28
 800368c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	dd59      	ble.n	8003746 <_dtoa_r+0x2f6>
 8003692:	9302      	str	r3, [sp, #8]
 8003694:	4699      	mov	r9, r3
 8003696:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003698:	2200      	movs	r2, #0
 800369a:	6072      	str	r2, [r6, #4]
 800369c:	2204      	movs	r2, #4
 800369e:	f102 0014 	add.w	r0, r2, #20
 80036a2:	4298      	cmp	r0, r3
 80036a4:	6871      	ldr	r1, [r6, #4]
 80036a6:	d953      	bls.n	8003750 <_dtoa_r+0x300>
 80036a8:	4620      	mov	r0, r4
 80036aa:	f000 fcaa 	bl	8004002 <_Balloc>
 80036ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036b0:	6030      	str	r0, [r6, #0]
 80036b2:	f1b9 0f0e 	cmp.w	r9, #14
 80036b6:	f8d3 b000 	ldr.w	fp, [r3]
 80036ba:	f200 80e6 	bhi.w	800388a <_dtoa_r+0x43a>
 80036be:	2d00      	cmp	r5, #0
 80036c0:	f000 80e3 	beq.w	800388a <_dtoa_r+0x43a>
 80036c4:	ed9d 7b00 	vldr	d7, [sp]
 80036c8:	f1ba 0f00 	cmp.w	sl, #0
 80036cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80036d0:	dd74      	ble.n	80037bc <_dtoa_r+0x36c>
 80036d2:	4a2a      	ldr	r2, [pc, #168]	; (800377c <_dtoa_r+0x32c>)
 80036d4:	f00a 030f 	and.w	r3, sl, #15
 80036d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80036dc:	ed93 7b00 	vldr	d7, [r3]
 80036e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80036e4:	06f0      	lsls	r0, r6, #27
 80036e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80036ea:	d565      	bpl.n	80037b8 <_dtoa_r+0x368>
 80036ec:	4b24      	ldr	r3, [pc, #144]	; (8003780 <_dtoa_r+0x330>)
 80036ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80036f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80036f6:	f7fd f85d 	bl	80007b4 <__aeabi_ddiv>
 80036fa:	e9cd 0100 	strd	r0, r1, [sp]
 80036fe:	f006 060f 	and.w	r6, r6, #15
 8003702:	2503      	movs	r5, #3
 8003704:	4f1e      	ldr	r7, [pc, #120]	; (8003780 <_dtoa_r+0x330>)
 8003706:	e04c      	b.n	80037a2 <_dtoa_r+0x352>
 8003708:	2301      	movs	r3, #1
 800370a:	930a      	str	r3, [sp, #40]	; 0x28
 800370c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800370e:	4453      	add	r3, sl
 8003710:	f103 0901 	add.w	r9, r3, #1
 8003714:	9302      	str	r3, [sp, #8]
 8003716:	464b      	mov	r3, r9
 8003718:	2b01      	cmp	r3, #1
 800371a:	bfb8      	it	lt
 800371c:	2301      	movlt	r3, #1
 800371e:	e7ba      	b.n	8003696 <_dtoa_r+0x246>
 8003720:	2300      	movs	r3, #0
 8003722:	e7b2      	b.n	800368a <_dtoa_r+0x23a>
 8003724:	2300      	movs	r3, #0
 8003726:	e7f0      	b.n	800370a <_dtoa_r+0x2ba>
 8003728:	2501      	movs	r5, #1
 800372a:	2300      	movs	r3, #0
 800372c:	9306      	str	r3, [sp, #24]
 800372e:	950a      	str	r5, [sp, #40]	; 0x28
 8003730:	f04f 33ff 	mov.w	r3, #4294967295
 8003734:	9302      	str	r3, [sp, #8]
 8003736:	4699      	mov	r9, r3
 8003738:	2200      	movs	r2, #0
 800373a:	2312      	movs	r3, #18
 800373c:	920b      	str	r2, [sp, #44]	; 0x2c
 800373e:	e7aa      	b.n	8003696 <_dtoa_r+0x246>
 8003740:	2301      	movs	r3, #1
 8003742:	930a      	str	r3, [sp, #40]	; 0x28
 8003744:	e7f4      	b.n	8003730 <_dtoa_r+0x2e0>
 8003746:	2301      	movs	r3, #1
 8003748:	9302      	str	r3, [sp, #8]
 800374a:	4699      	mov	r9, r3
 800374c:	461a      	mov	r2, r3
 800374e:	e7f5      	b.n	800373c <_dtoa_r+0x2ec>
 8003750:	3101      	adds	r1, #1
 8003752:	6071      	str	r1, [r6, #4]
 8003754:	0052      	lsls	r2, r2, #1
 8003756:	e7a2      	b.n	800369e <_dtoa_r+0x24e>
 8003758:	636f4361 	.word	0x636f4361
 800375c:	3fd287a7 	.word	0x3fd287a7
 8003760:	8b60c8b3 	.word	0x8b60c8b3
 8003764:	3fc68a28 	.word	0x3fc68a28
 8003768:	509f79fb 	.word	0x509f79fb
 800376c:	3fd34413 	.word	0x3fd34413
 8003770:	7ff00000 	.word	0x7ff00000
 8003774:	08004729 	.word	0x08004729
 8003778:	3ff80000 	.word	0x3ff80000
 800377c:	08004760 	.word	0x08004760
 8003780:	08004738 	.word	0x08004738
 8003784:	08004733 	.word	0x08004733
 8003788:	07f1      	lsls	r1, r6, #31
 800378a:	d508      	bpl.n	800379e <_dtoa_r+0x34e>
 800378c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003794:	f7fc fee4 	bl	8000560 <__aeabi_dmul>
 8003798:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800379c:	3501      	adds	r5, #1
 800379e:	1076      	asrs	r6, r6, #1
 80037a0:	3708      	adds	r7, #8
 80037a2:	2e00      	cmp	r6, #0
 80037a4:	d1f0      	bne.n	8003788 <_dtoa_r+0x338>
 80037a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80037aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037ae:	f7fd f801 	bl	80007b4 <__aeabi_ddiv>
 80037b2:	e9cd 0100 	strd	r0, r1, [sp]
 80037b6:	e01a      	b.n	80037ee <_dtoa_r+0x39e>
 80037b8:	2502      	movs	r5, #2
 80037ba:	e7a3      	b.n	8003704 <_dtoa_r+0x2b4>
 80037bc:	f000 80a0 	beq.w	8003900 <_dtoa_r+0x4b0>
 80037c0:	f1ca 0600 	rsb	r6, sl, #0
 80037c4:	4b9f      	ldr	r3, [pc, #636]	; (8003a44 <_dtoa_r+0x5f4>)
 80037c6:	4fa0      	ldr	r7, [pc, #640]	; (8003a48 <_dtoa_r+0x5f8>)
 80037c8:	f006 020f 	and.w	r2, r6, #15
 80037cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80037d8:	f7fc fec2 	bl	8000560 <__aeabi_dmul>
 80037dc:	e9cd 0100 	strd	r0, r1, [sp]
 80037e0:	1136      	asrs	r6, r6, #4
 80037e2:	2300      	movs	r3, #0
 80037e4:	2502      	movs	r5, #2
 80037e6:	2e00      	cmp	r6, #0
 80037e8:	d17f      	bne.n	80038ea <_dtoa_r+0x49a>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e1      	bne.n	80037b2 <_dtoa_r+0x362>
 80037ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8087 	beq.w	8003904 <_dtoa_r+0x4b4>
 80037f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80037fa:	2200      	movs	r2, #0
 80037fc:	4b93      	ldr	r3, [pc, #588]	; (8003a4c <_dtoa_r+0x5fc>)
 80037fe:	4630      	mov	r0, r6
 8003800:	4639      	mov	r1, r7
 8003802:	f7fd f91f 	bl	8000a44 <__aeabi_dcmplt>
 8003806:	2800      	cmp	r0, #0
 8003808:	d07c      	beq.n	8003904 <_dtoa_r+0x4b4>
 800380a:	f1b9 0f00 	cmp.w	r9, #0
 800380e:	d079      	beq.n	8003904 <_dtoa_r+0x4b4>
 8003810:	9b02      	ldr	r3, [sp, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	dd35      	ble.n	8003882 <_dtoa_r+0x432>
 8003816:	f10a 33ff 	add.w	r3, sl, #4294967295
 800381a:	9308      	str	r3, [sp, #32]
 800381c:	4639      	mov	r1, r7
 800381e:	2200      	movs	r2, #0
 8003820:	4b8b      	ldr	r3, [pc, #556]	; (8003a50 <_dtoa_r+0x600>)
 8003822:	4630      	mov	r0, r6
 8003824:	f7fc fe9c 	bl	8000560 <__aeabi_dmul>
 8003828:	e9cd 0100 	strd	r0, r1, [sp]
 800382c:	9f02      	ldr	r7, [sp, #8]
 800382e:	3501      	adds	r5, #1
 8003830:	4628      	mov	r0, r5
 8003832:	f7fc fe2b 	bl	800048c <__aeabi_i2d>
 8003836:	e9dd 2300 	ldrd	r2, r3, [sp]
 800383a:	f7fc fe91 	bl	8000560 <__aeabi_dmul>
 800383e:	2200      	movs	r2, #0
 8003840:	4b84      	ldr	r3, [pc, #528]	; (8003a54 <_dtoa_r+0x604>)
 8003842:	f7fc fcd7 	bl	80001f4 <__adddf3>
 8003846:	4605      	mov	r5, r0
 8003848:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800384c:	2f00      	cmp	r7, #0
 800384e:	d15d      	bne.n	800390c <_dtoa_r+0x4bc>
 8003850:	2200      	movs	r2, #0
 8003852:	4b81      	ldr	r3, [pc, #516]	; (8003a58 <_dtoa_r+0x608>)
 8003854:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003858:	f7fc fcca 	bl	80001f0 <__aeabi_dsub>
 800385c:	462a      	mov	r2, r5
 800385e:	4633      	mov	r3, r6
 8003860:	e9cd 0100 	strd	r0, r1, [sp]
 8003864:	f7fd f90c 	bl	8000a80 <__aeabi_dcmpgt>
 8003868:	2800      	cmp	r0, #0
 800386a:	f040 8288 	bne.w	8003d7e <_dtoa_r+0x92e>
 800386e:	462a      	mov	r2, r5
 8003870:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003878:	f7fd f8e4 	bl	8000a44 <__aeabi_dcmplt>
 800387c:	2800      	cmp	r0, #0
 800387e:	f040 827c 	bne.w	8003d7a <_dtoa_r+0x92a>
 8003882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003886:	e9cd 2300 	strd	r2, r3, [sp]
 800388a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800388c:	2b00      	cmp	r3, #0
 800388e:	f2c0 8150 	blt.w	8003b32 <_dtoa_r+0x6e2>
 8003892:	f1ba 0f0e 	cmp.w	sl, #14
 8003896:	f300 814c 	bgt.w	8003b32 <_dtoa_r+0x6e2>
 800389a:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <_dtoa_r+0x5f4>)
 800389c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80038a0:	ed93 7b00 	vldr	d7, [r3]
 80038a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80038ac:	f280 80d8 	bge.w	8003a60 <_dtoa_r+0x610>
 80038b0:	f1b9 0f00 	cmp.w	r9, #0
 80038b4:	f300 80d4 	bgt.w	8003a60 <_dtoa_r+0x610>
 80038b8:	f040 825e 	bne.w	8003d78 <_dtoa_r+0x928>
 80038bc:	2200      	movs	r2, #0
 80038be:	4b66      	ldr	r3, [pc, #408]	; (8003a58 <_dtoa_r+0x608>)
 80038c0:	ec51 0b17 	vmov	r0, r1, d7
 80038c4:	f7fc fe4c 	bl	8000560 <__aeabi_dmul>
 80038c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038cc:	f7fd f8ce 	bl	8000a6c <__aeabi_dcmpge>
 80038d0:	464f      	mov	r7, r9
 80038d2:	464e      	mov	r6, r9
 80038d4:	2800      	cmp	r0, #0
 80038d6:	f040 8234 	bne.w	8003d42 <_dtoa_r+0x8f2>
 80038da:	2331      	movs	r3, #49	; 0x31
 80038dc:	f10b 0501 	add.w	r5, fp, #1
 80038e0:	f88b 3000 	strb.w	r3, [fp]
 80038e4:	f10a 0a01 	add.w	sl, sl, #1
 80038e8:	e22f      	b.n	8003d4a <_dtoa_r+0x8fa>
 80038ea:	07f2      	lsls	r2, r6, #31
 80038ec:	d505      	bpl.n	80038fa <_dtoa_r+0x4aa>
 80038ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038f2:	f7fc fe35 	bl	8000560 <__aeabi_dmul>
 80038f6:	3501      	adds	r5, #1
 80038f8:	2301      	movs	r3, #1
 80038fa:	1076      	asrs	r6, r6, #1
 80038fc:	3708      	adds	r7, #8
 80038fe:	e772      	b.n	80037e6 <_dtoa_r+0x396>
 8003900:	2502      	movs	r5, #2
 8003902:	e774      	b.n	80037ee <_dtoa_r+0x39e>
 8003904:	f8cd a020 	str.w	sl, [sp, #32]
 8003908:	464f      	mov	r7, r9
 800390a:	e791      	b.n	8003830 <_dtoa_r+0x3e0>
 800390c:	4b4d      	ldr	r3, [pc, #308]	; (8003a44 <_dtoa_r+0x5f4>)
 800390e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003912:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	d047      	beq.n	80039ac <_dtoa_r+0x55c>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	2000      	movs	r0, #0
 8003922:	494e      	ldr	r1, [pc, #312]	; (8003a5c <_dtoa_r+0x60c>)
 8003924:	f7fc ff46 	bl	80007b4 <__aeabi_ddiv>
 8003928:	462a      	mov	r2, r5
 800392a:	4633      	mov	r3, r6
 800392c:	f7fc fc60 	bl	80001f0 <__aeabi_dsub>
 8003930:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003934:	465d      	mov	r5, fp
 8003936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800393a:	f7fd f8c1 	bl	8000ac0 <__aeabi_d2iz>
 800393e:	4606      	mov	r6, r0
 8003940:	f7fc fda4 	bl	800048c <__aeabi_i2d>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	e9dd 0100 	ldrd	r0, r1, [sp]
 800394c:	f7fc fc50 	bl	80001f0 <__aeabi_dsub>
 8003950:	3630      	adds	r6, #48	; 0x30
 8003952:	f805 6b01 	strb.w	r6, [r5], #1
 8003956:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800395a:	e9cd 0100 	strd	r0, r1, [sp]
 800395e:	f7fd f871 	bl	8000a44 <__aeabi_dcmplt>
 8003962:	2800      	cmp	r0, #0
 8003964:	d163      	bne.n	8003a2e <_dtoa_r+0x5de>
 8003966:	e9dd 2300 	ldrd	r2, r3, [sp]
 800396a:	2000      	movs	r0, #0
 800396c:	4937      	ldr	r1, [pc, #220]	; (8003a4c <_dtoa_r+0x5fc>)
 800396e:	f7fc fc3f 	bl	80001f0 <__aeabi_dsub>
 8003972:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003976:	f7fd f865 	bl	8000a44 <__aeabi_dcmplt>
 800397a:	2800      	cmp	r0, #0
 800397c:	f040 80b7 	bne.w	8003aee <_dtoa_r+0x69e>
 8003980:	eba5 030b 	sub.w	r3, r5, fp
 8003984:	429f      	cmp	r7, r3
 8003986:	f77f af7c 	ble.w	8003882 <_dtoa_r+0x432>
 800398a:	2200      	movs	r2, #0
 800398c:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <_dtoa_r+0x600>)
 800398e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003992:	f7fc fde5 	bl	8000560 <__aeabi_dmul>
 8003996:	2200      	movs	r2, #0
 8003998:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800399c:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <_dtoa_r+0x600>)
 800399e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039a2:	f7fc fddd 	bl	8000560 <__aeabi_dmul>
 80039a6:	e9cd 0100 	strd	r0, r1, [sp]
 80039aa:	e7c4      	b.n	8003936 <_dtoa_r+0x4e6>
 80039ac:	462a      	mov	r2, r5
 80039ae:	4633      	mov	r3, r6
 80039b0:	f7fc fdd6 	bl	8000560 <__aeabi_dmul>
 80039b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80039b8:	eb0b 0507 	add.w	r5, fp, r7
 80039bc:	465e      	mov	r6, fp
 80039be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039c2:	f7fd f87d 	bl	8000ac0 <__aeabi_d2iz>
 80039c6:	4607      	mov	r7, r0
 80039c8:	f7fc fd60 	bl	800048c <__aeabi_i2d>
 80039cc:	3730      	adds	r7, #48	; 0x30
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039d6:	f7fc fc0b 	bl	80001f0 <__aeabi_dsub>
 80039da:	f806 7b01 	strb.w	r7, [r6], #1
 80039de:	42ae      	cmp	r6, r5
 80039e0:	e9cd 0100 	strd	r0, r1, [sp]
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	d126      	bne.n	8003a38 <_dtoa_r+0x5e8>
 80039ea:	4b1c      	ldr	r3, [pc, #112]	; (8003a5c <_dtoa_r+0x60c>)
 80039ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80039f0:	f7fc fc00 	bl	80001f4 <__adddf3>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039fc:	f7fd f840 	bl	8000a80 <__aeabi_dcmpgt>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d174      	bne.n	8003aee <_dtoa_r+0x69e>
 8003a04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003a08:	2000      	movs	r0, #0
 8003a0a:	4914      	ldr	r1, [pc, #80]	; (8003a5c <_dtoa_r+0x60c>)
 8003a0c:	f7fc fbf0 	bl	80001f0 <__aeabi_dsub>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a18:	f7fd f814 	bl	8000a44 <__aeabi_dcmplt>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	f43f af30 	beq.w	8003882 <_dtoa_r+0x432>
 8003a22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a26:	2b30      	cmp	r3, #48	; 0x30
 8003a28:	f105 32ff 	add.w	r2, r5, #4294967295
 8003a2c:	d002      	beq.n	8003a34 <_dtoa_r+0x5e4>
 8003a2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003a32:	e04a      	b.n	8003aca <_dtoa_r+0x67a>
 8003a34:	4615      	mov	r5, r2
 8003a36:	e7f4      	b.n	8003a22 <_dtoa_r+0x5d2>
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <_dtoa_r+0x600>)
 8003a3a:	f7fc fd91 	bl	8000560 <__aeabi_dmul>
 8003a3e:	e9cd 0100 	strd	r0, r1, [sp]
 8003a42:	e7bc      	b.n	80039be <_dtoa_r+0x56e>
 8003a44:	08004760 	.word	0x08004760
 8003a48:	08004738 	.word	0x08004738
 8003a4c:	3ff00000 	.word	0x3ff00000
 8003a50:	40240000 	.word	0x40240000
 8003a54:	401c0000 	.word	0x401c0000
 8003a58:	40140000 	.word	0x40140000
 8003a5c:	3fe00000 	.word	0x3fe00000
 8003a60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003a64:	465d      	mov	r5, fp
 8003a66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	4639      	mov	r1, r7
 8003a6e:	f7fc fea1 	bl	80007b4 <__aeabi_ddiv>
 8003a72:	f7fd f825 	bl	8000ac0 <__aeabi_d2iz>
 8003a76:	4680      	mov	r8, r0
 8003a78:	f7fc fd08 	bl	800048c <__aeabi_i2d>
 8003a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a80:	f7fc fd6e 	bl	8000560 <__aeabi_dmul>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4630      	mov	r0, r6
 8003a8a:	4639      	mov	r1, r7
 8003a8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003a90:	f7fc fbae 	bl	80001f0 <__aeabi_dsub>
 8003a94:	f805 6b01 	strb.w	r6, [r5], #1
 8003a98:	eba5 060b 	sub.w	r6, r5, fp
 8003a9c:	45b1      	cmp	r9, r6
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	d139      	bne.n	8003b18 <_dtoa_r+0x6c8>
 8003aa4:	f7fc fba6 	bl	80001f4 <__adddf3>
 8003aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003aac:	4606      	mov	r6, r0
 8003aae:	460f      	mov	r7, r1
 8003ab0:	f7fc ffe6 	bl	8000a80 <__aeabi_dcmpgt>
 8003ab4:	b9c8      	cbnz	r0, 8003aea <_dtoa_r+0x69a>
 8003ab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003aba:	4630      	mov	r0, r6
 8003abc:	4639      	mov	r1, r7
 8003abe:	f7fc ffb7 	bl	8000a30 <__aeabi_dcmpeq>
 8003ac2:	b110      	cbz	r0, 8003aca <_dtoa_r+0x67a>
 8003ac4:	f018 0f01 	tst.w	r8, #1
 8003ac8:	d10f      	bne.n	8003aea <_dtoa_r+0x69a>
 8003aca:	9904      	ldr	r1, [sp, #16]
 8003acc:	4620      	mov	r0, r4
 8003ace:	f000 facc 	bl	800406a <_Bfree>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ad6:	702b      	strb	r3, [r5, #0]
 8003ad8:	f10a 0301 	add.w	r3, sl, #1
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8241 	beq.w	8003f68 <_dtoa_r+0xb18>
 8003ae6:	601d      	str	r5, [r3, #0]
 8003ae8:	e23e      	b.n	8003f68 <_dtoa_r+0xb18>
 8003aea:	f8cd a020 	str.w	sl, [sp, #32]
 8003aee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003af2:	2a39      	cmp	r2, #57	; 0x39
 8003af4:	f105 33ff 	add.w	r3, r5, #4294967295
 8003af8:	d108      	bne.n	8003b0c <_dtoa_r+0x6bc>
 8003afa:	459b      	cmp	fp, r3
 8003afc:	d10a      	bne.n	8003b14 <_dtoa_r+0x6c4>
 8003afe:	9b08      	ldr	r3, [sp, #32]
 8003b00:	3301      	adds	r3, #1
 8003b02:	9308      	str	r3, [sp, #32]
 8003b04:	2330      	movs	r3, #48	; 0x30
 8003b06:	f88b 3000 	strb.w	r3, [fp]
 8003b0a:	465b      	mov	r3, fp
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	3201      	adds	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	e78c      	b.n	8003a2e <_dtoa_r+0x5de>
 8003b14:	461d      	mov	r5, r3
 8003b16:	e7ea      	b.n	8003aee <_dtoa_r+0x69e>
 8003b18:	2200      	movs	r2, #0
 8003b1a:	4b9b      	ldr	r3, [pc, #620]	; (8003d88 <_dtoa_r+0x938>)
 8003b1c:	f7fc fd20 	bl	8000560 <__aeabi_dmul>
 8003b20:	2200      	movs	r2, #0
 8003b22:	2300      	movs	r3, #0
 8003b24:	4606      	mov	r6, r0
 8003b26:	460f      	mov	r7, r1
 8003b28:	f7fc ff82 	bl	8000a30 <__aeabi_dcmpeq>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d09a      	beq.n	8003a66 <_dtoa_r+0x616>
 8003b30:	e7cb      	b.n	8003aca <_dtoa_r+0x67a>
 8003b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	f000 808b 	beq.w	8003c50 <_dtoa_r+0x800>
 8003b3a:	9a06      	ldr	r2, [sp, #24]
 8003b3c:	2a01      	cmp	r2, #1
 8003b3e:	dc6e      	bgt.n	8003c1e <_dtoa_r+0x7ce>
 8003b40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	d067      	beq.n	8003c16 <_dtoa_r+0x7c6>
 8003b46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003b4a:	9f07      	ldr	r7, [sp, #28]
 8003b4c:	9d05      	ldr	r5, [sp, #20]
 8003b4e:	9a05      	ldr	r2, [sp, #20]
 8003b50:	2101      	movs	r1, #1
 8003b52:	441a      	add	r2, r3
 8003b54:	4620      	mov	r0, r4
 8003b56:	9205      	str	r2, [sp, #20]
 8003b58:	4498      	add	r8, r3
 8003b5a:	f000 fb26 	bl	80041aa <__i2b>
 8003b5e:	4606      	mov	r6, r0
 8003b60:	2d00      	cmp	r5, #0
 8003b62:	dd0c      	ble.n	8003b7e <_dtoa_r+0x72e>
 8003b64:	f1b8 0f00 	cmp.w	r8, #0
 8003b68:	dd09      	ble.n	8003b7e <_dtoa_r+0x72e>
 8003b6a:	4545      	cmp	r5, r8
 8003b6c:	9a05      	ldr	r2, [sp, #20]
 8003b6e:	462b      	mov	r3, r5
 8003b70:	bfa8      	it	ge
 8003b72:	4643      	movge	r3, r8
 8003b74:	1ad2      	subs	r2, r2, r3
 8003b76:	9205      	str	r2, [sp, #20]
 8003b78:	1aed      	subs	r5, r5, r3
 8003b7a:	eba8 0803 	sub.w	r8, r8, r3
 8003b7e:	9b07      	ldr	r3, [sp, #28]
 8003b80:	b1eb      	cbz	r3, 8003bbe <_dtoa_r+0x76e>
 8003b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d067      	beq.n	8003c58 <_dtoa_r+0x808>
 8003b88:	b18f      	cbz	r7, 8003bae <_dtoa_r+0x75e>
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	463a      	mov	r2, r7
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f000 fbaa 	bl	80042e8 <__pow5mult>
 8003b94:	9a04      	ldr	r2, [sp, #16]
 8003b96:	4601      	mov	r1, r0
 8003b98:	4606      	mov	r6, r0
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f000 fb0e 	bl	80041bc <__multiply>
 8003ba0:	9904      	ldr	r1, [sp, #16]
 8003ba2:	9008      	str	r0, [sp, #32]
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 fa60 	bl	800406a <_Bfree>
 8003baa:	9b08      	ldr	r3, [sp, #32]
 8003bac:	9304      	str	r3, [sp, #16]
 8003bae:	9b07      	ldr	r3, [sp, #28]
 8003bb0:	1bda      	subs	r2, r3, r7
 8003bb2:	d004      	beq.n	8003bbe <_dtoa_r+0x76e>
 8003bb4:	9904      	ldr	r1, [sp, #16]
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f000 fb96 	bl	80042e8 <__pow5mult>
 8003bbc:	9004      	str	r0, [sp, #16]
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f000 faf2 	bl	80041aa <__i2b>
 8003bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bc8:	4607      	mov	r7, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 81d0 	beq.w	8003f70 <_dtoa_r+0xb20>
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f000 fb87 	bl	80042e8 <__pow5mult>
 8003bda:	9b06      	ldr	r3, [sp, #24]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	4607      	mov	r7, r0
 8003be0:	dc40      	bgt.n	8003c64 <_dtoa_r+0x814>
 8003be2:	9b00      	ldr	r3, [sp, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d139      	bne.n	8003c5c <_dtoa_r+0x80c>
 8003be8:	9b01      	ldr	r3, [sp, #4]
 8003bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d136      	bne.n	8003c60 <_dtoa_r+0x810>
 8003bf2:	9b01      	ldr	r3, [sp, #4]
 8003bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bf8:	0d1b      	lsrs	r3, r3, #20
 8003bfa:	051b      	lsls	r3, r3, #20
 8003bfc:	b12b      	cbz	r3, 8003c0a <_dtoa_r+0x7ba>
 8003bfe:	9b05      	ldr	r3, [sp, #20]
 8003c00:	3301      	adds	r3, #1
 8003c02:	9305      	str	r3, [sp, #20]
 8003c04:	f108 0801 	add.w	r8, r8, #1
 8003c08:	2301      	movs	r3, #1
 8003c0a:	9307      	str	r3, [sp, #28]
 8003c0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d12a      	bne.n	8003c68 <_dtoa_r+0x818>
 8003c12:	2001      	movs	r0, #1
 8003c14:	e030      	b.n	8003c78 <_dtoa_r+0x828>
 8003c16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003c1c:	e795      	b.n	8003b4a <_dtoa_r+0x6fa>
 8003c1e:	9b07      	ldr	r3, [sp, #28]
 8003c20:	f109 37ff 	add.w	r7, r9, #4294967295
 8003c24:	42bb      	cmp	r3, r7
 8003c26:	bfbf      	itttt	lt
 8003c28:	9b07      	ldrlt	r3, [sp, #28]
 8003c2a:	9707      	strlt	r7, [sp, #28]
 8003c2c:	1afa      	sublt	r2, r7, r3
 8003c2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003c30:	bfbb      	ittet	lt
 8003c32:	189b      	addlt	r3, r3, r2
 8003c34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003c36:	1bdf      	subge	r7, r3, r7
 8003c38:	2700      	movlt	r7, #0
 8003c3a:	f1b9 0f00 	cmp.w	r9, #0
 8003c3e:	bfb5      	itete	lt
 8003c40:	9b05      	ldrlt	r3, [sp, #20]
 8003c42:	9d05      	ldrge	r5, [sp, #20]
 8003c44:	eba3 0509 	sublt.w	r5, r3, r9
 8003c48:	464b      	movge	r3, r9
 8003c4a:	bfb8      	it	lt
 8003c4c:	2300      	movlt	r3, #0
 8003c4e:	e77e      	b.n	8003b4e <_dtoa_r+0x6fe>
 8003c50:	9f07      	ldr	r7, [sp, #28]
 8003c52:	9d05      	ldr	r5, [sp, #20]
 8003c54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003c56:	e783      	b.n	8003b60 <_dtoa_r+0x710>
 8003c58:	9a07      	ldr	r2, [sp, #28]
 8003c5a:	e7ab      	b.n	8003bb4 <_dtoa_r+0x764>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e7d4      	b.n	8003c0a <_dtoa_r+0x7ba>
 8003c60:	9b00      	ldr	r3, [sp, #0]
 8003c62:	e7d2      	b.n	8003c0a <_dtoa_r+0x7ba>
 8003c64:	2300      	movs	r3, #0
 8003c66:	9307      	str	r3, [sp, #28]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003c6e:	6918      	ldr	r0, [r3, #16]
 8003c70:	f000 fa4d 	bl	800410e <__hi0bits>
 8003c74:	f1c0 0020 	rsb	r0, r0, #32
 8003c78:	4440      	add	r0, r8
 8003c7a:	f010 001f 	ands.w	r0, r0, #31
 8003c7e:	d047      	beq.n	8003d10 <_dtoa_r+0x8c0>
 8003c80:	f1c0 0320 	rsb	r3, r0, #32
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	dd3b      	ble.n	8003d00 <_dtoa_r+0x8b0>
 8003c88:	9b05      	ldr	r3, [sp, #20]
 8003c8a:	f1c0 001c 	rsb	r0, r0, #28
 8003c8e:	4403      	add	r3, r0
 8003c90:	9305      	str	r3, [sp, #20]
 8003c92:	4405      	add	r5, r0
 8003c94:	4480      	add	r8, r0
 8003c96:	9b05      	ldr	r3, [sp, #20]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dd05      	ble.n	8003ca8 <_dtoa_r+0x858>
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	9904      	ldr	r1, [sp, #16]
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 fb6f 	bl	8004384 <__lshift>
 8003ca6:	9004      	str	r0, [sp, #16]
 8003ca8:	f1b8 0f00 	cmp.w	r8, #0
 8003cac:	dd05      	ble.n	8003cba <_dtoa_r+0x86a>
 8003cae:	4639      	mov	r1, r7
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f000 fb66 	bl	8004384 <__lshift>
 8003cb8:	4607      	mov	r7, r0
 8003cba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cbc:	b353      	cbz	r3, 8003d14 <_dtoa_r+0x8c4>
 8003cbe:	4639      	mov	r1, r7
 8003cc0:	9804      	ldr	r0, [sp, #16]
 8003cc2:	f000 fbb3 	bl	800442c <__mcmp>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	da24      	bge.n	8003d14 <_dtoa_r+0x8c4>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	220a      	movs	r2, #10
 8003cce:	9904      	ldr	r1, [sp, #16]
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f000 f9e1 	bl	8004098 <__multadd>
 8003cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cd8:	9004      	str	r0, [sp, #16]
 8003cda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 814d 	beq.w	8003f7e <_dtoa_r+0xb2e>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	4631      	mov	r1, r6
 8003ce8:	220a      	movs	r2, #10
 8003cea:	4620      	mov	r0, r4
 8003cec:	f000 f9d4 	bl	8004098 <__multadd>
 8003cf0:	9b02      	ldr	r3, [sp, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	4606      	mov	r6, r0
 8003cf6:	dc4f      	bgt.n	8003d98 <_dtoa_r+0x948>
 8003cf8:	9b06      	ldr	r3, [sp, #24]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	dd4c      	ble.n	8003d98 <_dtoa_r+0x948>
 8003cfe:	e011      	b.n	8003d24 <_dtoa_r+0x8d4>
 8003d00:	d0c9      	beq.n	8003c96 <_dtoa_r+0x846>
 8003d02:	9a05      	ldr	r2, [sp, #20]
 8003d04:	331c      	adds	r3, #28
 8003d06:	441a      	add	r2, r3
 8003d08:	9205      	str	r2, [sp, #20]
 8003d0a:	441d      	add	r5, r3
 8003d0c:	4498      	add	r8, r3
 8003d0e:	e7c2      	b.n	8003c96 <_dtoa_r+0x846>
 8003d10:	4603      	mov	r3, r0
 8003d12:	e7f6      	b.n	8003d02 <_dtoa_r+0x8b2>
 8003d14:	f1b9 0f00 	cmp.w	r9, #0
 8003d18:	dc38      	bgt.n	8003d8c <_dtoa_r+0x93c>
 8003d1a:	9b06      	ldr	r3, [sp, #24]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	dd35      	ble.n	8003d8c <_dtoa_r+0x93c>
 8003d20:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d24:	9b02      	ldr	r3, [sp, #8]
 8003d26:	b963      	cbnz	r3, 8003d42 <_dtoa_r+0x8f2>
 8003d28:	4639      	mov	r1, r7
 8003d2a:	2205      	movs	r2, #5
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f000 f9b3 	bl	8004098 <__multadd>
 8003d32:	4601      	mov	r1, r0
 8003d34:	4607      	mov	r7, r0
 8003d36:	9804      	ldr	r0, [sp, #16]
 8003d38:	f000 fb78 	bl	800442c <__mcmp>
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	f73f adcc 	bgt.w	80038da <_dtoa_r+0x48a>
 8003d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d44:	465d      	mov	r5, fp
 8003d46:	ea6f 0a03 	mvn.w	sl, r3
 8003d4a:	f04f 0900 	mov.w	r9, #0
 8003d4e:	4639      	mov	r1, r7
 8003d50:	4620      	mov	r0, r4
 8003d52:	f000 f98a 	bl	800406a <_Bfree>
 8003d56:	2e00      	cmp	r6, #0
 8003d58:	f43f aeb7 	beq.w	8003aca <_dtoa_r+0x67a>
 8003d5c:	f1b9 0f00 	cmp.w	r9, #0
 8003d60:	d005      	beq.n	8003d6e <_dtoa_r+0x91e>
 8003d62:	45b1      	cmp	r9, r6
 8003d64:	d003      	beq.n	8003d6e <_dtoa_r+0x91e>
 8003d66:	4649      	mov	r1, r9
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f000 f97e 	bl	800406a <_Bfree>
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 f97a 	bl	800406a <_Bfree>
 8003d76:	e6a8      	b.n	8003aca <_dtoa_r+0x67a>
 8003d78:	2700      	movs	r7, #0
 8003d7a:	463e      	mov	r6, r7
 8003d7c:	e7e1      	b.n	8003d42 <_dtoa_r+0x8f2>
 8003d7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003d82:	463e      	mov	r6, r7
 8003d84:	e5a9      	b.n	80038da <_dtoa_r+0x48a>
 8003d86:	bf00      	nop
 8003d88:	40240000 	.word	0x40240000
 8003d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80fa 	beq.w	8003f8c <_dtoa_r+0xb3c>
 8003d98:	2d00      	cmp	r5, #0
 8003d9a:	dd05      	ble.n	8003da8 <_dtoa_r+0x958>
 8003d9c:	4631      	mov	r1, r6
 8003d9e:	462a      	mov	r2, r5
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 faef 	bl	8004384 <__lshift>
 8003da6:	4606      	mov	r6, r0
 8003da8:	9b07      	ldr	r3, [sp, #28]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d04c      	beq.n	8003e48 <_dtoa_r+0x9f8>
 8003dae:	6871      	ldr	r1, [r6, #4]
 8003db0:	4620      	mov	r0, r4
 8003db2:	f000 f926 	bl	8004002 <_Balloc>
 8003db6:	6932      	ldr	r2, [r6, #16]
 8003db8:	3202      	adds	r2, #2
 8003dba:	4605      	mov	r5, r0
 8003dbc:	0092      	lsls	r2, r2, #2
 8003dbe:	f106 010c 	add.w	r1, r6, #12
 8003dc2:	300c      	adds	r0, #12
 8003dc4:	f000 f912 	bl	8003fec <memcpy>
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4629      	mov	r1, r5
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f000 fad9 	bl	8004384 <__lshift>
 8003dd2:	9b00      	ldr	r3, [sp, #0]
 8003dd4:	f8cd b014 	str.w	fp, [sp, #20]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	46b1      	mov	r9, r6
 8003dde:	9307      	str	r3, [sp, #28]
 8003de0:	4606      	mov	r6, r0
 8003de2:	4639      	mov	r1, r7
 8003de4:	9804      	ldr	r0, [sp, #16]
 8003de6:	f7ff faa4 	bl	8003332 <quorem>
 8003dea:	4649      	mov	r1, r9
 8003dec:	4605      	mov	r5, r0
 8003dee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003df2:	9804      	ldr	r0, [sp, #16]
 8003df4:	f000 fb1a 	bl	800442c <__mcmp>
 8003df8:	4632      	mov	r2, r6
 8003dfa:	9000      	str	r0, [sp, #0]
 8003dfc:	4639      	mov	r1, r7
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f000 fb2e 	bl	8004460 <__mdiff>
 8003e04:	68c3      	ldr	r3, [r0, #12]
 8003e06:	4602      	mov	r2, r0
 8003e08:	bb03      	cbnz	r3, 8003e4c <_dtoa_r+0x9fc>
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	9008      	str	r0, [sp, #32]
 8003e0e:	9804      	ldr	r0, [sp, #16]
 8003e10:	f000 fb0c 	bl	800442c <__mcmp>
 8003e14:	9a08      	ldr	r2, [sp, #32]
 8003e16:	4603      	mov	r3, r0
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	9308      	str	r3, [sp, #32]
 8003e1e:	f000 f924 	bl	800406a <_Bfree>
 8003e22:	9b08      	ldr	r3, [sp, #32]
 8003e24:	b9a3      	cbnz	r3, 8003e50 <_dtoa_r+0xa00>
 8003e26:	9a06      	ldr	r2, [sp, #24]
 8003e28:	b992      	cbnz	r2, 8003e50 <_dtoa_r+0xa00>
 8003e2a:	9a07      	ldr	r2, [sp, #28]
 8003e2c:	b982      	cbnz	r2, 8003e50 <_dtoa_r+0xa00>
 8003e2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003e32:	d029      	beq.n	8003e88 <_dtoa_r+0xa38>
 8003e34:	9b00      	ldr	r3, [sp, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	dd01      	ble.n	8003e3e <_dtoa_r+0x9ee>
 8003e3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003e3e:	9b05      	ldr	r3, [sp, #20]
 8003e40:	1c5d      	adds	r5, r3, #1
 8003e42:	f883 8000 	strb.w	r8, [r3]
 8003e46:	e782      	b.n	8003d4e <_dtoa_r+0x8fe>
 8003e48:	4630      	mov	r0, r6
 8003e4a:	e7c2      	b.n	8003dd2 <_dtoa_r+0x982>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e7e3      	b.n	8003e18 <_dtoa_r+0x9c8>
 8003e50:	9a00      	ldr	r2, [sp, #0]
 8003e52:	2a00      	cmp	r2, #0
 8003e54:	db04      	blt.n	8003e60 <_dtoa_r+0xa10>
 8003e56:	d125      	bne.n	8003ea4 <_dtoa_r+0xa54>
 8003e58:	9a06      	ldr	r2, [sp, #24]
 8003e5a:	bb1a      	cbnz	r2, 8003ea4 <_dtoa_r+0xa54>
 8003e5c:	9a07      	ldr	r2, [sp, #28]
 8003e5e:	bb0a      	cbnz	r2, 8003ea4 <_dtoa_r+0xa54>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	ddec      	ble.n	8003e3e <_dtoa_r+0x9ee>
 8003e64:	2201      	movs	r2, #1
 8003e66:	9904      	ldr	r1, [sp, #16]
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f000 fa8b 	bl	8004384 <__lshift>
 8003e6e:	4639      	mov	r1, r7
 8003e70:	9004      	str	r0, [sp, #16]
 8003e72:	f000 fadb 	bl	800442c <__mcmp>
 8003e76:	2800      	cmp	r0, #0
 8003e78:	dc03      	bgt.n	8003e82 <_dtoa_r+0xa32>
 8003e7a:	d1e0      	bne.n	8003e3e <_dtoa_r+0x9ee>
 8003e7c:	f018 0f01 	tst.w	r8, #1
 8003e80:	d0dd      	beq.n	8003e3e <_dtoa_r+0x9ee>
 8003e82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003e86:	d1d8      	bne.n	8003e3a <_dtoa_r+0x9ea>
 8003e88:	9b05      	ldr	r3, [sp, #20]
 8003e8a:	9a05      	ldr	r2, [sp, #20]
 8003e8c:	1c5d      	adds	r5, r3, #1
 8003e8e:	2339      	movs	r3, #57	; 0x39
 8003e90:	7013      	strb	r3, [r2, #0]
 8003e92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003e96:	2b39      	cmp	r3, #57	; 0x39
 8003e98:	f105 32ff 	add.w	r2, r5, #4294967295
 8003e9c:	d04f      	beq.n	8003f3e <_dtoa_r+0xaee>
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	7013      	strb	r3, [r2, #0]
 8003ea2:	e754      	b.n	8003d4e <_dtoa_r+0x8fe>
 8003ea4:	9a05      	ldr	r2, [sp, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f102 0501 	add.w	r5, r2, #1
 8003eac:	dd06      	ble.n	8003ebc <_dtoa_r+0xa6c>
 8003eae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003eb2:	d0e9      	beq.n	8003e88 <_dtoa_r+0xa38>
 8003eb4:	f108 0801 	add.w	r8, r8, #1
 8003eb8:	9b05      	ldr	r3, [sp, #20]
 8003eba:	e7c2      	b.n	8003e42 <_dtoa_r+0x9f2>
 8003ebc:	9a02      	ldr	r2, [sp, #8]
 8003ebe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003ec2:	eba5 030b 	sub.w	r3, r5, fp
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d021      	beq.n	8003f0e <_dtoa_r+0xabe>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	220a      	movs	r2, #10
 8003ece:	9904      	ldr	r1, [sp, #16]
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f000 f8e1 	bl	8004098 <__multadd>
 8003ed6:	45b1      	cmp	r9, r6
 8003ed8:	9004      	str	r0, [sp, #16]
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	f04f 020a 	mov.w	r2, #10
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	d105      	bne.n	8003ef4 <_dtoa_r+0xaa4>
 8003ee8:	f000 f8d6 	bl	8004098 <__multadd>
 8003eec:	4681      	mov	r9, r0
 8003eee:	4606      	mov	r6, r0
 8003ef0:	9505      	str	r5, [sp, #20]
 8003ef2:	e776      	b.n	8003de2 <_dtoa_r+0x992>
 8003ef4:	f000 f8d0 	bl	8004098 <__multadd>
 8003ef8:	4631      	mov	r1, r6
 8003efa:	4681      	mov	r9, r0
 8003efc:	2300      	movs	r3, #0
 8003efe:	220a      	movs	r2, #10
 8003f00:	4620      	mov	r0, r4
 8003f02:	f000 f8c9 	bl	8004098 <__multadd>
 8003f06:	4606      	mov	r6, r0
 8003f08:	e7f2      	b.n	8003ef0 <_dtoa_r+0xaa0>
 8003f0a:	f04f 0900 	mov.w	r9, #0
 8003f0e:	2201      	movs	r2, #1
 8003f10:	9904      	ldr	r1, [sp, #16]
 8003f12:	4620      	mov	r0, r4
 8003f14:	f000 fa36 	bl	8004384 <__lshift>
 8003f18:	4639      	mov	r1, r7
 8003f1a:	9004      	str	r0, [sp, #16]
 8003f1c:	f000 fa86 	bl	800442c <__mcmp>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	dcb6      	bgt.n	8003e92 <_dtoa_r+0xa42>
 8003f24:	d102      	bne.n	8003f2c <_dtoa_r+0xadc>
 8003f26:	f018 0f01 	tst.w	r8, #1
 8003f2a:	d1b2      	bne.n	8003e92 <_dtoa_r+0xa42>
 8003f2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	f105 32ff 	add.w	r2, r5, #4294967295
 8003f36:	f47f af0a 	bne.w	8003d4e <_dtoa_r+0x8fe>
 8003f3a:	4615      	mov	r5, r2
 8003f3c:	e7f6      	b.n	8003f2c <_dtoa_r+0xadc>
 8003f3e:	4593      	cmp	fp, r2
 8003f40:	d105      	bne.n	8003f4e <_dtoa_r+0xafe>
 8003f42:	2331      	movs	r3, #49	; 0x31
 8003f44:	f10a 0a01 	add.w	sl, sl, #1
 8003f48:	f88b 3000 	strb.w	r3, [fp]
 8003f4c:	e6ff      	b.n	8003d4e <_dtoa_r+0x8fe>
 8003f4e:	4615      	mov	r5, r2
 8003f50:	e79f      	b.n	8003e92 <_dtoa_r+0xa42>
 8003f52:	f8df b064 	ldr.w	fp, [pc, #100]	; 8003fb8 <_dtoa_r+0xb68>
 8003f56:	e007      	b.n	8003f68 <_dtoa_r+0xb18>
 8003f58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8003fbc <_dtoa_r+0xb6c>
 8003f5e:	b11b      	cbz	r3, 8003f68 <_dtoa_r+0xb18>
 8003f60:	f10b 0308 	add.w	r3, fp, #8
 8003f64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	4658      	mov	r0, fp
 8003f6a:	b017      	add	sp, #92	; 0x5c
 8003f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f70:	9b06      	ldr	r3, [sp, #24]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	f77f ae35 	ble.w	8003be2 <_dtoa_r+0x792>
 8003f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f7a:	9307      	str	r3, [sp, #28]
 8003f7c:	e649      	b.n	8003c12 <_dtoa_r+0x7c2>
 8003f7e:	9b02      	ldr	r3, [sp, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	dc03      	bgt.n	8003f8c <_dtoa_r+0xb3c>
 8003f84:	9b06      	ldr	r3, [sp, #24]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	f73f aecc 	bgt.w	8003d24 <_dtoa_r+0x8d4>
 8003f8c:	465d      	mov	r5, fp
 8003f8e:	4639      	mov	r1, r7
 8003f90:	9804      	ldr	r0, [sp, #16]
 8003f92:	f7ff f9ce 	bl	8003332 <quorem>
 8003f96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003f9a:	f805 8b01 	strb.w	r8, [r5], #1
 8003f9e:	9a02      	ldr	r2, [sp, #8]
 8003fa0:	eba5 030b 	sub.w	r3, r5, fp
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	ddb0      	ble.n	8003f0a <_dtoa_r+0xaba>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	220a      	movs	r2, #10
 8003fac:	9904      	ldr	r1, [sp, #16]
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f000 f872 	bl	8004098 <__multadd>
 8003fb4:	9004      	str	r0, [sp, #16]
 8003fb6:	e7ea      	b.n	8003f8e <_dtoa_r+0xb3e>
 8003fb8:	08004728 	.word	0x08004728
 8003fbc:	0800472a 	.word	0x0800472a

08003fc0 <_localeconv_r>:
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <_localeconv_r+0x14>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6a18      	ldr	r0, [r3, #32]
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <_localeconv_r+0x18>)
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	bf08      	it	eq
 8003fcc:	4618      	moveq	r0, r3
 8003fce:	30f0      	adds	r0, #240	; 0xf0
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	2000000c 	.word	0x2000000c
 8003fd8:	20000070 	.word	0x20000070

08003fdc <malloc>:
 8003fdc:	4b02      	ldr	r3, [pc, #8]	; (8003fe8 <malloc+0xc>)
 8003fde:	4601      	mov	r1, r0
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	f000 baf7 	b.w	80045d4 <_malloc_r>
 8003fe6:	bf00      	nop
 8003fe8:	2000000c 	.word	0x2000000c

08003fec <memcpy>:
 8003fec:	b510      	push	{r4, lr}
 8003fee:	1e43      	subs	r3, r0, #1
 8003ff0:	440a      	add	r2, r1
 8003ff2:	4291      	cmp	r1, r2
 8003ff4:	d100      	bne.n	8003ff8 <memcpy+0xc>
 8003ff6:	bd10      	pop	{r4, pc}
 8003ff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004000:	e7f7      	b.n	8003ff2 <memcpy+0x6>

08004002 <_Balloc>:
 8004002:	b570      	push	{r4, r5, r6, lr}
 8004004:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004006:	4604      	mov	r4, r0
 8004008:	460e      	mov	r6, r1
 800400a:	b93d      	cbnz	r5, 800401c <_Balloc+0x1a>
 800400c:	2010      	movs	r0, #16
 800400e:	f7ff ffe5 	bl	8003fdc <malloc>
 8004012:	6260      	str	r0, [r4, #36]	; 0x24
 8004014:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004018:	6005      	str	r5, [r0, #0]
 800401a:	60c5      	str	r5, [r0, #12]
 800401c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800401e:	68eb      	ldr	r3, [r5, #12]
 8004020:	b183      	cbz	r3, 8004044 <_Balloc+0x42>
 8004022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800402a:	b9b8      	cbnz	r0, 800405c <_Balloc+0x5a>
 800402c:	2101      	movs	r1, #1
 800402e:	fa01 f506 	lsl.w	r5, r1, r6
 8004032:	1d6a      	adds	r2, r5, #5
 8004034:	0092      	lsls	r2, r2, #2
 8004036:	4620      	mov	r0, r4
 8004038:	f000 fabe 	bl	80045b8 <_calloc_r>
 800403c:	b160      	cbz	r0, 8004058 <_Balloc+0x56>
 800403e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004042:	e00e      	b.n	8004062 <_Balloc+0x60>
 8004044:	2221      	movs	r2, #33	; 0x21
 8004046:	2104      	movs	r1, #4
 8004048:	4620      	mov	r0, r4
 800404a:	f000 fab5 	bl	80045b8 <_calloc_r>
 800404e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004050:	60e8      	str	r0, [r5, #12]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e4      	bne.n	8004022 <_Balloc+0x20>
 8004058:	2000      	movs	r0, #0
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	6802      	ldr	r2, [r0, #0]
 800405e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004062:	2300      	movs	r3, #0
 8004064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004068:	e7f7      	b.n	800405a <_Balloc+0x58>

0800406a <_Bfree>:
 800406a:	b570      	push	{r4, r5, r6, lr}
 800406c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800406e:	4606      	mov	r6, r0
 8004070:	460d      	mov	r5, r1
 8004072:	b93c      	cbnz	r4, 8004084 <_Bfree+0x1a>
 8004074:	2010      	movs	r0, #16
 8004076:	f7ff ffb1 	bl	8003fdc <malloc>
 800407a:	6270      	str	r0, [r6, #36]	; 0x24
 800407c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004080:	6004      	str	r4, [r0, #0]
 8004082:	60c4      	str	r4, [r0, #12]
 8004084:	b13d      	cbz	r5, 8004096 <_Bfree+0x2c>
 8004086:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004088:	686a      	ldr	r2, [r5, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004090:	6029      	str	r1, [r5, #0]
 8004092:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004096:	bd70      	pop	{r4, r5, r6, pc}

08004098 <__multadd>:
 8004098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409c:	690d      	ldr	r5, [r1, #16]
 800409e:	461f      	mov	r7, r3
 80040a0:	4606      	mov	r6, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	f101 0c14 	add.w	ip, r1, #20
 80040a8:	2300      	movs	r3, #0
 80040aa:	f8dc 0000 	ldr.w	r0, [ip]
 80040ae:	b281      	uxth	r1, r0
 80040b0:	fb02 7101 	mla	r1, r2, r1, r7
 80040b4:	0c0f      	lsrs	r7, r1, #16
 80040b6:	0c00      	lsrs	r0, r0, #16
 80040b8:	fb02 7000 	mla	r0, r2, r0, r7
 80040bc:	b289      	uxth	r1, r1
 80040be:	3301      	adds	r3, #1
 80040c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80040c4:	429d      	cmp	r5, r3
 80040c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80040ca:	f84c 1b04 	str.w	r1, [ip], #4
 80040ce:	dcec      	bgt.n	80040aa <__multadd+0x12>
 80040d0:	b1d7      	cbz	r7, 8004108 <__multadd+0x70>
 80040d2:	68a3      	ldr	r3, [r4, #8]
 80040d4:	42ab      	cmp	r3, r5
 80040d6:	dc12      	bgt.n	80040fe <__multadd+0x66>
 80040d8:	6861      	ldr	r1, [r4, #4]
 80040da:	4630      	mov	r0, r6
 80040dc:	3101      	adds	r1, #1
 80040de:	f7ff ff90 	bl	8004002 <_Balloc>
 80040e2:	6922      	ldr	r2, [r4, #16]
 80040e4:	3202      	adds	r2, #2
 80040e6:	f104 010c 	add.w	r1, r4, #12
 80040ea:	4680      	mov	r8, r0
 80040ec:	0092      	lsls	r2, r2, #2
 80040ee:	300c      	adds	r0, #12
 80040f0:	f7ff ff7c 	bl	8003fec <memcpy>
 80040f4:	4621      	mov	r1, r4
 80040f6:	4630      	mov	r0, r6
 80040f8:	f7ff ffb7 	bl	800406a <_Bfree>
 80040fc:	4644      	mov	r4, r8
 80040fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004102:	3501      	adds	r5, #1
 8004104:	615f      	str	r7, [r3, #20]
 8004106:	6125      	str	r5, [r4, #16]
 8004108:	4620      	mov	r0, r4
 800410a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800410e <__hi0bits>:
 800410e:	0c02      	lsrs	r2, r0, #16
 8004110:	0412      	lsls	r2, r2, #16
 8004112:	4603      	mov	r3, r0
 8004114:	b9b2      	cbnz	r2, 8004144 <__hi0bits+0x36>
 8004116:	0403      	lsls	r3, r0, #16
 8004118:	2010      	movs	r0, #16
 800411a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800411e:	bf04      	itt	eq
 8004120:	021b      	lsleq	r3, r3, #8
 8004122:	3008      	addeq	r0, #8
 8004124:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004128:	bf04      	itt	eq
 800412a:	011b      	lsleq	r3, r3, #4
 800412c:	3004      	addeq	r0, #4
 800412e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004132:	bf04      	itt	eq
 8004134:	009b      	lsleq	r3, r3, #2
 8004136:	3002      	addeq	r0, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	db06      	blt.n	800414a <__hi0bits+0x3c>
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	d503      	bpl.n	8004148 <__hi0bits+0x3a>
 8004140:	3001      	adds	r0, #1
 8004142:	4770      	bx	lr
 8004144:	2000      	movs	r0, #0
 8004146:	e7e8      	b.n	800411a <__hi0bits+0xc>
 8004148:	2020      	movs	r0, #32
 800414a:	4770      	bx	lr

0800414c <__lo0bits>:
 800414c:	6803      	ldr	r3, [r0, #0]
 800414e:	f013 0207 	ands.w	r2, r3, #7
 8004152:	4601      	mov	r1, r0
 8004154:	d00b      	beq.n	800416e <__lo0bits+0x22>
 8004156:	07da      	lsls	r2, r3, #31
 8004158:	d423      	bmi.n	80041a2 <__lo0bits+0x56>
 800415a:	0798      	lsls	r0, r3, #30
 800415c:	bf49      	itett	mi
 800415e:	085b      	lsrmi	r3, r3, #1
 8004160:	089b      	lsrpl	r3, r3, #2
 8004162:	2001      	movmi	r0, #1
 8004164:	600b      	strmi	r3, [r1, #0]
 8004166:	bf5c      	itt	pl
 8004168:	600b      	strpl	r3, [r1, #0]
 800416a:	2002      	movpl	r0, #2
 800416c:	4770      	bx	lr
 800416e:	b298      	uxth	r0, r3
 8004170:	b9a8      	cbnz	r0, 800419e <__lo0bits+0x52>
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	2010      	movs	r0, #16
 8004176:	f013 0fff 	tst.w	r3, #255	; 0xff
 800417a:	bf04      	itt	eq
 800417c:	0a1b      	lsreq	r3, r3, #8
 800417e:	3008      	addeq	r0, #8
 8004180:	071a      	lsls	r2, r3, #28
 8004182:	bf04      	itt	eq
 8004184:	091b      	lsreq	r3, r3, #4
 8004186:	3004      	addeq	r0, #4
 8004188:	079a      	lsls	r2, r3, #30
 800418a:	bf04      	itt	eq
 800418c:	089b      	lsreq	r3, r3, #2
 800418e:	3002      	addeq	r0, #2
 8004190:	07da      	lsls	r2, r3, #31
 8004192:	d402      	bmi.n	800419a <__lo0bits+0x4e>
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	d006      	beq.n	80041a6 <__lo0bits+0x5a>
 8004198:	3001      	adds	r0, #1
 800419a:	600b      	str	r3, [r1, #0]
 800419c:	4770      	bx	lr
 800419e:	4610      	mov	r0, r2
 80041a0:	e7e9      	b.n	8004176 <__lo0bits+0x2a>
 80041a2:	2000      	movs	r0, #0
 80041a4:	4770      	bx	lr
 80041a6:	2020      	movs	r0, #32
 80041a8:	4770      	bx	lr

080041aa <__i2b>:
 80041aa:	b510      	push	{r4, lr}
 80041ac:	460c      	mov	r4, r1
 80041ae:	2101      	movs	r1, #1
 80041b0:	f7ff ff27 	bl	8004002 <_Balloc>
 80041b4:	2201      	movs	r2, #1
 80041b6:	6144      	str	r4, [r0, #20]
 80041b8:	6102      	str	r2, [r0, #16]
 80041ba:	bd10      	pop	{r4, pc}

080041bc <__multiply>:
 80041bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c0:	4614      	mov	r4, r2
 80041c2:	690a      	ldr	r2, [r1, #16]
 80041c4:	6923      	ldr	r3, [r4, #16]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	bfb8      	it	lt
 80041ca:	460b      	movlt	r3, r1
 80041cc:	4688      	mov	r8, r1
 80041ce:	bfbc      	itt	lt
 80041d0:	46a0      	movlt	r8, r4
 80041d2:	461c      	movlt	r4, r3
 80041d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80041d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80041dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80041e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80041e4:	eb07 0609 	add.w	r6, r7, r9
 80041e8:	42b3      	cmp	r3, r6
 80041ea:	bfb8      	it	lt
 80041ec:	3101      	addlt	r1, #1
 80041ee:	f7ff ff08 	bl	8004002 <_Balloc>
 80041f2:	f100 0514 	add.w	r5, r0, #20
 80041f6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80041fa:	462b      	mov	r3, r5
 80041fc:	2200      	movs	r2, #0
 80041fe:	4573      	cmp	r3, lr
 8004200:	d316      	bcc.n	8004230 <__multiply+0x74>
 8004202:	f104 0214 	add.w	r2, r4, #20
 8004206:	f108 0114 	add.w	r1, r8, #20
 800420a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800420e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	9b00      	ldr	r3, [sp, #0]
 8004216:	9201      	str	r2, [sp, #4]
 8004218:	4293      	cmp	r3, r2
 800421a:	d80c      	bhi.n	8004236 <__multiply+0x7a>
 800421c:	2e00      	cmp	r6, #0
 800421e:	dd03      	ble.n	8004228 <__multiply+0x6c>
 8004220:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05d      	beq.n	80042e4 <__multiply+0x128>
 8004228:	6106      	str	r6, [r0, #16]
 800422a:	b003      	add	sp, #12
 800422c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004230:	f843 2b04 	str.w	r2, [r3], #4
 8004234:	e7e3      	b.n	80041fe <__multiply+0x42>
 8004236:	f8b2 b000 	ldrh.w	fp, [r2]
 800423a:	f1bb 0f00 	cmp.w	fp, #0
 800423e:	d023      	beq.n	8004288 <__multiply+0xcc>
 8004240:	4689      	mov	r9, r1
 8004242:	46ac      	mov	ip, r5
 8004244:	f04f 0800 	mov.w	r8, #0
 8004248:	f859 4b04 	ldr.w	r4, [r9], #4
 800424c:	f8dc a000 	ldr.w	sl, [ip]
 8004250:	b2a3      	uxth	r3, r4
 8004252:	fa1f fa8a 	uxth.w	sl, sl
 8004256:	fb0b a303 	mla	r3, fp, r3, sl
 800425a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800425e:	f8dc 4000 	ldr.w	r4, [ip]
 8004262:	4443      	add	r3, r8
 8004264:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004268:	fb0b 840a 	mla	r4, fp, sl, r8
 800426c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004270:	46e2      	mov	sl, ip
 8004272:	b29b      	uxth	r3, r3
 8004274:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004278:	454f      	cmp	r7, r9
 800427a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800427e:	f84a 3b04 	str.w	r3, [sl], #4
 8004282:	d82b      	bhi.n	80042dc <__multiply+0x120>
 8004284:	f8cc 8004 	str.w	r8, [ip, #4]
 8004288:	9b01      	ldr	r3, [sp, #4]
 800428a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800428e:	3204      	adds	r2, #4
 8004290:	f1ba 0f00 	cmp.w	sl, #0
 8004294:	d020      	beq.n	80042d8 <__multiply+0x11c>
 8004296:	682b      	ldr	r3, [r5, #0]
 8004298:	4689      	mov	r9, r1
 800429a:	46a8      	mov	r8, r5
 800429c:	f04f 0b00 	mov.w	fp, #0
 80042a0:	f8b9 c000 	ldrh.w	ip, [r9]
 80042a4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80042a8:	fb0a 440c 	mla	r4, sl, ip, r4
 80042ac:	445c      	add	r4, fp
 80042ae:	46c4      	mov	ip, r8
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80042b6:	f84c 3b04 	str.w	r3, [ip], #4
 80042ba:	f859 3b04 	ldr.w	r3, [r9], #4
 80042be:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80042c2:	0c1b      	lsrs	r3, r3, #16
 80042c4:	fb0a b303 	mla	r3, sl, r3, fp
 80042c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80042cc:	454f      	cmp	r7, r9
 80042ce:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80042d2:	d805      	bhi.n	80042e0 <__multiply+0x124>
 80042d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80042d8:	3504      	adds	r5, #4
 80042da:	e79b      	b.n	8004214 <__multiply+0x58>
 80042dc:	46d4      	mov	ip, sl
 80042de:	e7b3      	b.n	8004248 <__multiply+0x8c>
 80042e0:	46e0      	mov	r8, ip
 80042e2:	e7dd      	b.n	80042a0 <__multiply+0xe4>
 80042e4:	3e01      	subs	r6, #1
 80042e6:	e799      	b.n	800421c <__multiply+0x60>

080042e8 <__pow5mult>:
 80042e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042ec:	4615      	mov	r5, r2
 80042ee:	f012 0203 	ands.w	r2, r2, #3
 80042f2:	4606      	mov	r6, r0
 80042f4:	460f      	mov	r7, r1
 80042f6:	d007      	beq.n	8004308 <__pow5mult+0x20>
 80042f8:	3a01      	subs	r2, #1
 80042fa:	4c21      	ldr	r4, [pc, #132]	; (8004380 <__pow5mult+0x98>)
 80042fc:	2300      	movs	r3, #0
 80042fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004302:	f7ff fec9 	bl	8004098 <__multadd>
 8004306:	4607      	mov	r7, r0
 8004308:	10ad      	asrs	r5, r5, #2
 800430a:	d035      	beq.n	8004378 <__pow5mult+0x90>
 800430c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800430e:	b93c      	cbnz	r4, 8004320 <__pow5mult+0x38>
 8004310:	2010      	movs	r0, #16
 8004312:	f7ff fe63 	bl	8003fdc <malloc>
 8004316:	6270      	str	r0, [r6, #36]	; 0x24
 8004318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800431c:	6004      	str	r4, [r0, #0]
 800431e:	60c4      	str	r4, [r0, #12]
 8004320:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004328:	b94c      	cbnz	r4, 800433e <__pow5mult+0x56>
 800432a:	f240 2171 	movw	r1, #625	; 0x271
 800432e:	4630      	mov	r0, r6
 8004330:	f7ff ff3b 	bl	80041aa <__i2b>
 8004334:	2300      	movs	r3, #0
 8004336:	f8c8 0008 	str.w	r0, [r8, #8]
 800433a:	4604      	mov	r4, r0
 800433c:	6003      	str	r3, [r0, #0]
 800433e:	f04f 0800 	mov.w	r8, #0
 8004342:	07eb      	lsls	r3, r5, #31
 8004344:	d50a      	bpl.n	800435c <__pow5mult+0x74>
 8004346:	4639      	mov	r1, r7
 8004348:	4622      	mov	r2, r4
 800434a:	4630      	mov	r0, r6
 800434c:	f7ff ff36 	bl	80041bc <__multiply>
 8004350:	4639      	mov	r1, r7
 8004352:	4681      	mov	r9, r0
 8004354:	4630      	mov	r0, r6
 8004356:	f7ff fe88 	bl	800406a <_Bfree>
 800435a:	464f      	mov	r7, r9
 800435c:	106d      	asrs	r5, r5, #1
 800435e:	d00b      	beq.n	8004378 <__pow5mult+0x90>
 8004360:	6820      	ldr	r0, [r4, #0]
 8004362:	b938      	cbnz	r0, 8004374 <__pow5mult+0x8c>
 8004364:	4622      	mov	r2, r4
 8004366:	4621      	mov	r1, r4
 8004368:	4630      	mov	r0, r6
 800436a:	f7ff ff27 	bl	80041bc <__multiply>
 800436e:	6020      	str	r0, [r4, #0]
 8004370:	f8c0 8000 	str.w	r8, [r0]
 8004374:	4604      	mov	r4, r0
 8004376:	e7e4      	b.n	8004342 <__pow5mult+0x5a>
 8004378:	4638      	mov	r0, r7
 800437a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800437e:	bf00      	nop
 8004380:	08004828 	.word	0x08004828

08004384 <__lshift>:
 8004384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004388:	460c      	mov	r4, r1
 800438a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800438e:	6923      	ldr	r3, [r4, #16]
 8004390:	6849      	ldr	r1, [r1, #4]
 8004392:	eb0a 0903 	add.w	r9, sl, r3
 8004396:	68a3      	ldr	r3, [r4, #8]
 8004398:	4607      	mov	r7, r0
 800439a:	4616      	mov	r6, r2
 800439c:	f109 0501 	add.w	r5, r9, #1
 80043a0:	42ab      	cmp	r3, r5
 80043a2:	db32      	blt.n	800440a <__lshift+0x86>
 80043a4:	4638      	mov	r0, r7
 80043a6:	f7ff fe2c 	bl	8004002 <_Balloc>
 80043aa:	2300      	movs	r3, #0
 80043ac:	4680      	mov	r8, r0
 80043ae:	f100 0114 	add.w	r1, r0, #20
 80043b2:	461a      	mov	r2, r3
 80043b4:	4553      	cmp	r3, sl
 80043b6:	db2b      	blt.n	8004410 <__lshift+0x8c>
 80043b8:	6920      	ldr	r0, [r4, #16]
 80043ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80043be:	f104 0314 	add.w	r3, r4, #20
 80043c2:	f016 021f 	ands.w	r2, r6, #31
 80043c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80043ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80043ce:	d025      	beq.n	800441c <__lshift+0x98>
 80043d0:	f1c2 0e20 	rsb	lr, r2, #32
 80043d4:	2000      	movs	r0, #0
 80043d6:	681e      	ldr	r6, [r3, #0]
 80043d8:	468a      	mov	sl, r1
 80043da:	4096      	lsls	r6, r2
 80043dc:	4330      	orrs	r0, r6
 80043de:	f84a 0b04 	str.w	r0, [sl], #4
 80043e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80043e6:	459c      	cmp	ip, r3
 80043e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80043ec:	d814      	bhi.n	8004418 <__lshift+0x94>
 80043ee:	6048      	str	r0, [r1, #4]
 80043f0:	b108      	cbz	r0, 80043f6 <__lshift+0x72>
 80043f2:	f109 0502 	add.w	r5, r9, #2
 80043f6:	3d01      	subs	r5, #1
 80043f8:	4638      	mov	r0, r7
 80043fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80043fe:	4621      	mov	r1, r4
 8004400:	f7ff fe33 	bl	800406a <_Bfree>
 8004404:	4640      	mov	r0, r8
 8004406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440a:	3101      	adds	r1, #1
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	e7c7      	b.n	80043a0 <__lshift+0x1c>
 8004410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004414:	3301      	adds	r3, #1
 8004416:	e7cd      	b.n	80043b4 <__lshift+0x30>
 8004418:	4651      	mov	r1, sl
 800441a:	e7dc      	b.n	80043d6 <__lshift+0x52>
 800441c:	3904      	subs	r1, #4
 800441e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004422:	f841 2f04 	str.w	r2, [r1, #4]!
 8004426:	459c      	cmp	ip, r3
 8004428:	d8f9      	bhi.n	800441e <__lshift+0x9a>
 800442a:	e7e4      	b.n	80043f6 <__lshift+0x72>

0800442c <__mcmp>:
 800442c:	6903      	ldr	r3, [r0, #16]
 800442e:	690a      	ldr	r2, [r1, #16]
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	b530      	push	{r4, r5, lr}
 8004434:	d10c      	bne.n	8004450 <__mcmp+0x24>
 8004436:	0092      	lsls	r2, r2, #2
 8004438:	3014      	adds	r0, #20
 800443a:	3114      	adds	r1, #20
 800443c:	1884      	adds	r4, r0, r2
 800443e:	4411      	add	r1, r2
 8004440:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004444:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004448:	4295      	cmp	r5, r2
 800444a:	d003      	beq.n	8004454 <__mcmp+0x28>
 800444c:	d305      	bcc.n	800445a <__mcmp+0x2e>
 800444e:	2301      	movs	r3, #1
 8004450:	4618      	mov	r0, r3
 8004452:	bd30      	pop	{r4, r5, pc}
 8004454:	42a0      	cmp	r0, r4
 8004456:	d3f3      	bcc.n	8004440 <__mcmp+0x14>
 8004458:	e7fa      	b.n	8004450 <__mcmp+0x24>
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	e7f7      	b.n	8004450 <__mcmp+0x24>

08004460 <__mdiff>:
 8004460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004464:	460d      	mov	r5, r1
 8004466:	4607      	mov	r7, r0
 8004468:	4611      	mov	r1, r2
 800446a:	4628      	mov	r0, r5
 800446c:	4614      	mov	r4, r2
 800446e:	f7ff ffdd 	bl	800442c <__mcmp>
 8004472:	1e06      	subs	r6, r0, #0
 8004474:	d108      	bne.n	8004488 <__mdiff+0x28>
 8004476:	4631      	mov	r1, r6
 8004478:	4638      	mov	r0, r7
 800447a:	f7ff fdc2 	bl	8004002 <_Balloc>
 800447e:	2301      	movs	r3, #1
 8004480:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004488:	bfa4      	itt	ge
 800448a:	4623      	movge	r3, r4
 800448c:	462c      	movge	r4, r5
 800448e:	4638      	mov	r0, r7
 8004490:	6861      	ldr	r1, [r4, #4]
 8004492:	bfa6      	itte	ge
 8004494:	461d      	movge	r5, r3
 8004496:	2600      	movge	r6, #0
 8004498:	2601      	movlt	r6, #1
 800449a:	f7ff fdb2 	bl	8004002 <_Balloc>
 800449e:	692b      	ldr	r3, [r5, #16]
 80044a0:	60c6      	str	r6, [r0, #12]
 80044a2:	6926      	ldr	r6, [r4, #16]
 80044a4:	f105 0914 	add.w	r9, r5, #20
 80044a8:	f104 0214 	add.w	r2, r4, #20
 80044ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80044b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80044b4:	f100 0514 	add.w	r5, r0, #20
 80044b8:	f04f 0e00 	mov.w	lr, #0
 80044bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80044c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80044c4:	fa1e f18a 	uxtah	r1, lr, sl
 80044c8:	b2a3      	uxth	r3, r4
 80044ca:	1ac9      	subs	r1, r1, r3
 80044cc:	0c23      	lsrs	r3, r4, #16
 80044ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80044d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80044d6:	b289      	uxth	r1, r1
 80044d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80044dc:	45c8      	cmp	r8, r9
 80044de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80044e2:	4694      	mov	ip, r2
 80044e4:	f845 3b04 	str.w	r3, [r5], #4
 80044e8:	d8e8      	bhi.n	80044bc <__mdiff+0x5c>
 80044ea:	45bc      	cmp	ip, r7
 80044ec:	d304      	bcc.n	80044f8 <__mdiff+0x98>
 80044ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80044f2:	b183      	cbz	r3, 8004516 <__mdiff+0xb6>
 80044f4:	6106      	str	r6, [r0, #16]
 80044f6:	e7c5      	b.n	8004484 <__mdiff+0x24>
 80044f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80044fc:	fa1e f381 	uxtah	r3, lr, r1
 8004500:	141a      	asrs	r2, r3, #16
 8004502:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004506:	b29b      	uxth	r3, r3
 8004508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800450c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004510:	f845 3b04 	str.w	r3, [r5], #4
 8004514:	e7e9      	b.n	80044ea <__mdiff+0x8a>
 8004516:	3e01      	subs	r6, #1
 8004518:	e7e9      	b.n	80044ee <__mdiff+0x8e>

0800451a <__d2b>:
 800451a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800451e:	460e      	mov	r6, r1
 8004520:	2101      	movs	r1, #1
 8004522:	ec59 8b10 	vmov	r8, r9, d0
 8004526:	4615      	mov	r5, r2
 8004528:	f7ff fd6b 	bl	8004002 <_Balloc>
 800452c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004530:	4607      	mov	r7, r0
 8004532:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004536:	bb34      	cbnz	r4, 8004586 <__d2b+0x6c>
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	f1b8 0300 	subs.w	r3, r8, #0
 800453e:	d027      	beq.n	8004590 <__d2b+0x76>
 8004540:	a802      	add	r0, sp, #8
 8004542:	f840 3d08 	str.w	r3, [r0, #-8]!
 8004546:	f7ff fe01 	bl	800414c <__lo0bits>
 800454a:	9900      	ldr	r1, [sp, #0]
 800454c:	b1f0      	cbz	r0, 800458c <__d2b+0x72>
 800454e:	9a01      	ldr	r2, [sp, #4]
 8004550:	f1c0 0320 	rsb	r3, r0, #32
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	430b      	orrs	r3, r1
 800455a:	40c2      	lsrs	r2, r0
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	9201      	str	r2, [sp, #4]
 8004560:	9b01      	ldr	r3, [sp, #4]
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf14      	ite	ne
 8004568:	2102      	movne	r1, #2
 800456a:	2101      	moveq	r1, #1
 800456c:	6139      	str	r1, [r7, #16]
 800456e:	b1c4      	cbz	r4, 80045a2 <__d2b+0x88>
 8004570:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004574:	4404      	add	r4, r0
 8004576:	6034      	str	r4, [r6, #0]
 8004578:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800457c:	6028      	str	r0, [r5, #0]
 800457e:	4638      	mov	r0, r7
 8004580:	b003      	add	sp, #12
 8004582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800458a:	e7d5      	b.n	8004538 <__d2b+0x1e>
 800458c:	6179      	str	r1, [r7, #20]
 800458e:	e7e7      	b.n	8004560 <__d2b+0x46>
 8004590:	a801      	add	r0, sp, #4
 8004592:	f7ff fddb 	bl	800414c <__lo0bits>
 8004596:	9b01      	ldr	r3, [sp, #4]
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	2101      	movs	r1, #1
 800459c:	6139      	str	r1, [r7, #16]
 800459e:	3020      	adds	r0, #32
 80045a0:	e7e5      	b.n	800456e <__d2b+0x54>
 80045a2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80045a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80045aa:	6030      	str	r0, [r6, #0]
 80045ac:	6918      	ldr	r0, [r3, #16]
 80045ae:	f7ff fdae 	bl	800410e <__hi0bits>
 80045b2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80045b6:	e7e1      	b.n	800457c <__d2b+0x62>

080045b8 <_calloc_r>:
 80045b8:	b538      	push	{r3, r4, r5, lr}
 80045ba:	fb02 f401 	mul.w	r4, r2, r1
 80045be:	4621      	mov	r1, r4
 80045c0:	f000 f808 	bl	80045d4 <_malloc_r>
 80045c4:	4605      	mov	r5, r0
 80045c6:	b118      	cbz	r0, 80045d0 <_calloc_r+0x18>
 80045c8:	4622      	mov	r2, r4
 80045ca:	2100      	movs	r1, #0
 80045cc:	f7fe fb60 	bl	8002c90 <memset>
 80045d0:	4628      	mov	r0, r5
 80045d2:	bd38      	pop	{r3, r4, r5, pc}

080045d4 <_malloc_r>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	1ccd      	adds	r5, r1, #3
 80045d8:	f025 0503 	bic.w	r5, r5, #3
 80045dc:	3508      	adds	r5, #8
 80045de:	2d0c      	cmp	r5, #12
 80045e0:	bf38      	it	cc
 80045e2:	250c      	movcc	r5, #12
 80045e4:	2d00      	cmp	r5, #0
 80045e6:	4606      	mov	r6, r0
 80045e8:	db01      	blt.n	80045ee <_malloc_r+0x1a>
 80045ea:	42a9      	cmp	r1, r5
 80045ec:	d903      	bls.n	80045f6 <_malloc_r+0x22>
 80045ee:	230c      	movs	r3, #12
 80045f0:	6033      	str	r3, [r6, #0]
 80045f2:	2000      	movs	r0, #0
 80045f4:	bd70      	pop	{r4, r5, r6, pc}
 80045f6:	f000 f869 	bl	80046cc <__malloc_lock>
 80045fa:	4a21      	ldr	r2, [pc, #132]	; (8004680 <_malloc_r+0xac>)
 80045fc:	6814      	ldr	r4, [r2, #0]
 80045fe:	4621      	mov	r1, r4
 8004600:	b991      	cbnz	r1, 8004628 <_malloc_r+0x54>
 8004602:	4c20      	ldr	r4, [pc, #128]	; (8004684 <_malloc_r+0xb0>)
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	b91b      	cbnz	r3, 8004610 <_malloc_r+0x3c>
 8004608:	4630      	mov	r0, r6
 800460a:	f000 f83d 	bl	8004688 <_sbrk_r>
 800460e:	6020      	str	r0, [r4, #0]
 8004610:	4629      	mov	r1, r5
 8004612:	4630      	mov	r0, r6
 8004614:	f000 f838 	bl	8004688 <_sbrk_r>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d124      	bne.n	8004666 <_malloc_r+0x92>
 800461c:	230c      	movs	r3, #12
 800461e:	6033      	str	r3, [r6, #0]
 8004620:	4630      	mov	r0, r6
 8004622:	f000 f854 	bl	80046ce <__malloc_unlock>
 8004626:	e7e4      	b.n	80045f2 <_malloc_r+0x1e>
 8004628:	680b      	ldr	r3, [r1, #0]
 800462a:	1b5b      	subs	r3, r3, r5
 800462c:	d418      	bmi.n	8004660 <_malloc_r+0x8c>
 800462e:	2b0b      	cmp	r3, #11
 8004630:	d90f      	bls.n	8004652 <_malloc_r+0x7e>
 8004632:	600b      	str	r3, [r1, #0]
 8004634:	50cd      	str	r5, [r1, r3]
 8004636:	18cc      	adds	r4, r1, r3
 8004638:	4630      	mov	r0, r6
 800463a:	f000 f848 	bl	80046ce <__malloc_unlock>
 800463e:	f104 000b 	add.w	r0, r4, #11
 8004642:	1d23      	adds	r3, r4, #4
 8004644:	f020 0007 	bic.w	r0, r0, #7
 8004648:	1ac3      	subs	r3, r0, r3
 800464a:	d0d3      	beq.n	80045f4 <_malloc_r+0x20>
 800464c:	425a      	negs	r2, r3
 800464e:	50e2      	str	r2, [r4, r3]
 8004650:	e7d0      	b.n	80045f4 <_malloc_r+0x20>
 8004652:	428c      	cmp	r4, r1
 8004654:	684b      	ldr	r3, [r1, #4]
 8004656:	bf16      	itet	ne
 8004658:	6063      	strne	r3, [r4, #4]
 800465a:	6013      	streq	r3, [r2, #0]
 800465c:	460c      	movne	r4, r1
 800465e:	e7eb      	b.n	8004638 <_malloc_r+0x64>
 8004660:	460c      	mov	r4, r1
 8004662:	6849      	ldr	r1, [r1, #4]
 8004664:	e7cc      	b.n	8004600 <_malloc_r+0x2c>
 8004666:	1cc4      	adds	r4, r0, #3
 8004668:	f024 0403 	bic.w	r4, r4, #3
 800466c:	42a0      	cmp	r0, r4
 800466e:	d005      	beq.n	800467c <_malloc_r+0xa8>
 8004670:	1a21      	subs	r1, r4, r0
 8004672:	4630      	mov	r0, r6
 8004674:	f000 f808 	bl	8004688 <_sbrk_r>
 8004678:	3001      	adds	r0, #1
 800467a:	d0cf      	beq.n	800461c <_malloc_r+0x48>
 800467c:	6025      	str	r5, [r4, #0]
 800467e:	e7db      	b.n	8004638 <_malloc_r+0x64>
 8004680:	200001fc 	.word	0x200001fc
 8004684:	20000200 	.word	0x20000200

08004688 <_sbrk_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4c06      	ldr	r4, [pc, #24]	; (80046a4 <_sbrk_r+0x1c>)
 800468c:	2300      	movs	r3, #0
 800468e:	4605      	mov	r5, r0
 8004690:	4608      	mov	r0, r1
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	f7fe f94a 	bl	800292c <_sbrk>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_sbrk_r+0x1a>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_sbrk_r+0x1a>
 80046a0:	602b      	str	r3, [r5, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	20000264 	.word	0x20000264

080046a8 <__ascii_mbtowc>:
 80046a8:	b082      	sub	sp, #8
 80046aa:	b901      	cbnz	r1, 80046ae <__ascii_mbtowc+0x6>
 80046ac:	a901      	add	r1, sp, #4
 80046ae:	b142      	cbz	r2, 80046c2 <__ascii_mbtowc+0x1a>
 80046b0:	b14b      	cbz	r3, 80046c6 <__ascii_mbtowc+0x1e>
 80046b2:	7813      	ldrb	r3, [r2, #0]
 80046b4:	600b      	str	r3, [r1, #0]
 80046b6:	7812      	ldrb	r2, [r2, #0]
 80046b8:	1c10      	adds	r0, r2, #0
 80046ba:	bf18      	it	ne
 80046bc:	2001      	movne	r0, #1
 80046be:	b002      	add	sp, #8
 80046c0:	4770      	bx	lr
 80046c2:	4610      	mov	r0, r2
 80046c4:	e7fb      	b.n	80046be <__ascii_mbtowc+0x16>
 80046c6:	f06f 0001 	mvn.w	r0, #1
 80046ca:	e7f8      	b.n	80046be <__ascii_mbtowc+0x16>

080046cc <__malloc_lock>:
 80046cc:	4770      	bx	lr

080046ce <__malloc_unlock>:
 80046ce:	4770      	bx	lr

080046d0 <__ascii_wctomb>:
 80046d0:	b149      	cbz	r1, 80046e6 <__ascii_wctomb+0x16>
 80046d2:	2aff      	cmp	r2, #255	; 0xff
 80046d4:	bf85      	ittet	hi
 80046d6:	238a      	movhi	r3, #138	; 0x8a
 80046d8:	6003      	strhi	r3, [r0, #0]
 80046da:	700a      	strbls	r2, [r1, #0]
 80046dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80046e0:	bf98      	it	ls
 80046e2:	2001      	movls	r0, #1
 80046e4:	4770      	bx	lr
 80046e6:	4608      	mov	r0, r1
 80046e8:	4770      	bx	lr
	...

080046ec <_init>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr

080046f8 <_fini>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr
